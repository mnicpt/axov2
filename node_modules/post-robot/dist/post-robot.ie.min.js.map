{"version":3,"sources":["webpack://postRobot/webpack/universalModuleDefinition","webpack://postRobot/webpack/bootstrap","webpack://postRobot/./node_modules/cross-domain-utils/src/util.js","webpack://postRobot/./node_modules/cross-domain-utils/src/constants.js","webpack://postRobot/./node_modules/cross-domain-utils/src/utils.js","webpack://postRobot/./node_modules/zalgo-promise/src/utils.js","webpack://postRobot/./node_modules/zalgo-promise/src/exceptions.js","webpack://postRobot/./node_modules/zalgo-promise/src/flush.js","webpack://postRobot/./node_modules/zalgo-promise/src/promise.js","webpack://postRobot/./node_modules/cross-domain-safe-weakmap/src/util.js","webpack://postRobot/./node_modules/cross-domain-safe-weakmap/src/weakmap.js","webpack://postRobot/./node_modules/belter/src/util.js","webpack://postRobot/./node_modules/cross-domain-safe-weakmap/src/native.js","webpack://postRobot/./node_modules/belter/src/dom.js","webpack://postRobot/./src/global.js","webpack://postRobot/./node_modules/belter/src/constants.js","webpack://postRobot/./src/lib/hello.js","webpack://postRobot/./src/conf/constants.js","webpack://postRobot/./src/lib/windows.js","webpack://postRobot/./node_modules/universal-serialize/src/common.js","webpack://postRobot/./node_modules/universal-serialize/src/constants.js","webpack://postRobot/./node_modules/universal-serialize/src/serialize.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/function.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/error.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/promise.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/regex.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/date.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/array.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/object.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/string.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/number.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/boolean.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/null.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/undefined.js","webpack://postRobot/./node_modules/universal-serialize/src/deserialize.js","webpack://postRobot/./src/bridge/common.js","webpack://postRobot/./src/bridge/parent.js","webpack://postRobot/./src/bridge/setup.js","webpack://postRobot/./src/bridge/bridge.js","webpack://postRobot/./src/bridge/child.js","webpack://postRobot/./src/serialize/window.js","webpack://postRobot/./src/serialize/function.js","webpack://postRobot/./src/serialize/serialize.js","webpack://postRobot/./src/serialize/promise.js","webpack://postRobot/./src/drivers/send/strategies.js","webpack://postRobot/./src/drivers/send/index.js","webpack://postRobot/./src/drivers/listeners.js","webpack://postRobot/./src/drivers/receive/types.js","webpack://postRobot/./src/drivers/receive/index.js","webpack://postRobot/./src/public/on.js","webpack://postRobot/./src/lib/compat.js","webpack://postRobot/./src/public/send.js","webpack://postRobot/./src/conf/config.js","webpack://postRobot/./src/setup.js","webpack://postRobot/./src/types.js","webpack://postRobot/./src/index.js","webpack://postRobot/./src/clean.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","hasOwnProperty","p","s","isRegex","item","toString","IE_WIN_ACCESS_ERROR","getActualProtocol","win","window","location","protocol","getProtocol","mockDomain","split","isAboutProtocol","getParent","parent","err","getOpener","opener","canReadFromWindow","getActualDomain","Error","PROTOCOL","host","getDomain","domain","indexOf","isSameDomain","desc","getOwnPropertyDescriptor","isMockProtocol","isActuallySameDomain","assertSameDomain","isAncestorParent","child","childParent","result","push","getParents","getFrames","frames","len","length","frame","getAllChildFrames","getTop","top","getAllFramesInWindow","iframeWindows","iframeFrames","isWindowClosed","allowMock","closed","message","mockclosed","iframeIndex","collection","safeIndexOf","contentWindow","parentNode","doc","ownerDocument","documentElement","contains","isFrameWindowClosed","getUserAgent","navigator","mockUserAgent","userAgent","getFrameByName","winFrames","childFrame","isOpener","getAncestor","anyMatch","collection1","collection2","item1","isSameTopWindow","win1","win2","top1","top2","allFrames1","allFrames2","opener1","opener2","matchDomain","pattern","origin","Array","isArray","Boolean","match","JSON","stringify","some","subpattern","getDomainFromUrl","url","slice","join","isWindow","obj","Window","__cross_domain_utils_window_check__","getFrameForWindow","frameElement","document","querySelectorAll","closeWindow","isIframe","parentElement","removeChild","close","isPromise","Promise","constructor","then","flushPromise","dispatchedErrors","possiblyUnhandledPromiseHandlers","activeCount","flushActive","promise","resolve","startActive","endActive","ZalgoPromise","handler","resolved","rejected","errorHandled","error","handlers","dispatching","stack","isAsync","res","reject","dispatch","setTimeout","j","dispatchPossiblyUnhandledError","asyncReject","chain","firstPromise","secondPromise","onSuccess","onError","promiseResult","catch","undefined","finally","onFinally","try","timeout","time","clearTimeout","toPromise","TypeError","lazy","all","promises","count","results","prom","hash","awaitPromises","map","items","method","onPossiblyUnhandledException","cancel","splice","context","args","apply","delay","flush","objectIDs","CrossDomainSafeWeakMap","weakmap","keys","values","Math","random","WeakMap","freeze","testWeakMap","testKey","set","hasNativeWeakMap","_cleanupClosedWindows","delete","isSafeToReadWrite","entry","writable","index","has","getOrSet","getFunctionName","fn","__name__","displayName","setFunctionName","uniqueID","chars","replace","charAt","floor","str","btoa","encodeURIComponent","p1","String","fromCharCode","parseInt","Buffer","from","base64encode","Date","toISOString","toLowerCase","serializeArgs","subkey","val","uid","getObjectID","Element","nodeType","style","getEmptyObject","memoizeGlobalIndex","memoizeGlobalIndexValidFrom","memoize","options","simpleCache","thisCache","thisNamespace","cacheTime","memoizeIndex","memoizedFunction","cache","cacheKey","arguments","cacheResult","now","reset","memoizePromise","memoizedPromiseFunction","noop","stringifyError","level","newErr","getBody","body","isDocumentReady","readyState","isDocumentInteractive","clear","interval","setInterval","clearInterval","currentScript","getCurrentScript","getStackTrace","stackDetails","exec","scriptLocation","getElementsByTagName","reverse","script","src","inferCurrentScript","currentUID","getGlobal","globalKey","__POST_ROBOT__","getAttribute","ATTRIBUTES","hashedString","total","charCodeAt","abs","strHashStr","dataset","setAttribute","getObj","globalStore","defStore","store","storeKey","defVal","del","WildCard","getWildcard","global","WINDOW_WILDCARD","windowStore","winStore","getStore","getInstanceID","resolveHelloPromise","helloPromises","existingPromise","newPromise","sayHello","send","instanceID","data","getWindowInstanceID","awaitWindowHello","getHelloPromise","markWindowKnown","isSerializedType","__type__","determineType","serializeType","type","__val__","SERIALIZER","code","source","toJSON","defaultSerializers","DESERIALIZER","RegExp","defaultDeserializers","needsBridgeForBrowser","needsBridgeForWin","needsBridgeForDomain","needsBridge","getBridgeName","BRIDGE_NAME_PREFIX","isBridge","documentBodyReady","registerRemoteWindow","findRemoteWindow","remoteWinPromise","registerRemoteSendMessage","sendMessage","remoteWin","remoteDomain","fireAndForget","rejectRemoteSendMessage","linkWindow","popupWindowsByName","popupWindowsByWin","winName","details","setupBridge","windowOpen","on","receiveMessage","open","last","normalizeMockUrl","bridgePromise","bridge","getWindowDetails","listenForOpenTunnel","openTunnelToParent","canary","tunnelWindows","parentWindow","id","cleanTunnelWindows","addTunnelWindow","tunnelWindow","setupOpenTunnelToParent","openTunnelToOpener","cleanupProxyWindows","idToProxyWindow","shouldClean","getSerializedWindow","winPromise","windowNamePromise","windowTypePromise","getName","getType","focus","isClosed","setLocation","href","opts","target","form","createElement","display","input","appendChild","submit","submitForm","setName","sameDomain","ProxyWindow","serializedWindow","isProxyWindow","actualWindow","actualWindowPromise","getID","setWindow","isPopup","isPopupPromise","getNamePromise","reopenPromise","focusPromise","getWindow","awaitWindow","matchWindow","proxyInstanceID","knownWindowInstanceID","unwrap","serialize","toProxyWindow","deserialize","addMethod","methodStore","proxyWindowMethods","lookupMethod","serializeFunction","destination","meth","methodSource","arg","__id__","serializeMessage","serializers","serializer","serializePromise","deserializeMessage","deserializers","parse","deserializer","serializedPromise","deserializePromise","serializedFunction","getDeserializedFunction","crossDomainFunctionWrapper","__origin__","__source__","deserializeFunction","SEND_MESSAGE_STRATEGIES","domainBuffer","buffer","serializedMessage","strategies","errors","strategyName","getResponseListener","deleteResponseListener","isResponseListenerErrored","getRequestListener","requestListeners","winQualifier","nameListeners","domainListeners","listener","regex","handleRequest","logName","sendResponse","ack","pathname","handleError","handleAck","handleResponse","event","receivedMessages","messages","parsedMessage","parseMessages","deserializeMessages","requestListener","addRequestListener","winCandidate","requestListenerPromise","actualWin","listenersCollection","existingListener","strDomain","winNameDomainRegexListeners","winNameDomainRegexListener","winNameListeners","winNameDomainListeners","errorHandler","once","postMessage","messagingChild","messagingParent","sendBridgeMessage","foreignGlobal","winOrProxyWin","domainMatcher","responseTimeout","childTimeout","validateOptions","actualParent","isAncestor","targetDomain","actualDomain","normalizedDomain","normalizeDomain","responseListener","addResponseListener","reqPromises","markResponseListenerErrored","totalAckTimeout","isWindowKnown","totalResTimeout","ackTimeout","resTimeout","cancelled","max","loop","internalSerializeMessage","internalDeserializeMessage","createProxyWindow","setup","initialized","addEventListener","sourceElement","originalEvent","messageListener","removeEventListener","listenForMessages","initHello","destroy","responseListeners","cancelResponseListeners","TYPES","cleanUpWindow","openBridge","bridges","bridgeFrames","iframe","openBridgeFrame","linkUrl","hasBridge","destroyBridges"],"mappings":"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","file":"post-robot.ie.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"postRobot\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"postRobot\"] = factory();\n\telse\n\t\troot[\"postRobot\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/* @flow */\n\nexport function isRegex(item : mixed) : boolean {\n    // $FlowFixMe method-unbinding\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : $ReadOnlyArray<mixed>) {\n    // pass\n}\n","/* @flow */\n\nexport const PROTOCOL = {\n    MOCK:  ('mock:' : 'mock:'),\n    FILE:  ('file:' : 'file:'),\n    ABOUT: ('about:' : 'about:')\n};\n\nexport const WILDCARD = '*';\n\nexport const WINDOW_TYPE = {\n    IFRAME: ('iframe' : 'iframe'),\n    POPUP:  ('popup' : 'popup')\n};\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isRegex, noop } from './util';\nimport type { CrossDomainWindowType, SameDomainWindowType, DomainMatcher } from './types';\nimport { PROTOCOL, WILDCARD } from './constants';\n\nconst IE_WIN_ACCESS_ERROR = 'Call was rejected by callee.\\r\\n';\n\nexport function getActualProtocol(win : SameDomainWindowType = window) : ?string {\n    return win.location.protocol;\n}\n\nexport function getProtocol(win : SameDomainWindowType = window) : ?string {\n    if (win.mockDomain) {\n        const protocol = win.mockDomain.split('//')[0];\n\n        if (protocol) {\n            return protocol;\n        }\n    }\n\n    return getActualProtocol(win);\n}\n\nexport function isFileProtocol(win : SameDomainWindowType = window) : boolean {\n    return getProtocol(win) === PROTOCOL.FILE;\n}\n\nexport function isAboutProtocol(win : SameDomainWindowType = window) : boolean {\n    return getProtocol(win) === PROTOCOL.ABOUT;\n}\n\nexport function isMockProtocol(win : SameDomainWindowType = window) : boolean {\n    return getProtocol(win) === PROTOCOL.MOCK;\n}\n\nexport function getParent(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.parent && win.parent !== win) {\n            return win.parent;\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    // Make sure we're not actually an iframe which has had window.open() called on us\n    if (getParent(win)) {\n        return;\n    }\n\n    try {\n        return win.opener;\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function canReadFromWindow(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        noop(win && win.location && win.location.href);\n        return true;\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function getActualDomain(win? : SameDomainWindowType = window) : string {\n\n    const location = win.location;\n\n    if (!location) {\n        throw new Error(`Can not read window location`);\n    }\n\n    const protocol = getActualProtocol(win);\n\n    if (!protocol) {\n        throw new Error(`Can not read window protocol`);\n    }\n\n    if (protocol === PROTOCOL.FILE) {\n        return `${ PROTOCOL.FILE }//`;\n    }\n\n    if (protocol === PROTOCOL.ABOUT) {\n\n        const parent = getParent(win);\n        if (parent && canReadFromWindow(parent)) {\n            // $FlowFixMe\n            return getActualDomain(parent);\n        }\n\n        return `${ PROTOCOL.ABOUT }//`;\n    }\n\n    const host = location.host;\n\n    if (!host) {\n        throw new Error(`Can not read window host`);\n    }\n\n    return `${ protocol }//${ host }`;\n}\n\nexport function getDomain(win? : SameDomainWindowType = window) : string {\n\n    const domain = getActualDomain(win);\n\n    if (domain && win.mockDomain && win.mockDomain.indexOf(PROTOCOL.MOCK) === 0) {\n        return win.mockDomain;\n    }\n\n    return domain;\n}\n\nexport function isBlankDomain(win : CrossDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        if (!win.location.href) {\n            return true;\n        }\n\n        if (win.location.href === 'about:blank') {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isActuallySameDomain(win : CrossDomainWindowType) : boolean {\n\n    try {\n        if (win === window) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        const desc = Object.getOwnPropertyDescriptor(win, 'location');\n\n        if (desc && desc.enumerable === false) {\n            return false;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (isMockProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (getActualDomain(win) === getActualDomain(window)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n\n    if (!isActuallySameDomain(win)) {\n        return false;\n    }\n\n    try {\n        if (win === window) {\n            return true;\n        }\n        \n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (getDomain(window) === getDomain(win)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\n\nexport function assertSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : SameDomainWindowType {\n    if (!isSameDomain(win)) {\n        throw new Error(`Expected window to be same domain`);\n    }\n\n    // $FlowFixMe\n    return win;\n}\n\nexport function getParents(win : CrossDomainWindowType) : $ReadOnlyArray<CrossDomainWindowType> {\n\n    const result = [];\n\n    try {\n\n        while (win.parent !== win) {\n            result.push(win.parent);\n            win = win.parent;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return result;\n}\n\nexport function isAncestorParent(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    if (!parent || !child) {\n        return false;\n    }\n\n    const childParent = getParent(child);\n\n    if (childParent) {\n        return childParent === parent;\n    }\n\n    if (getParents(child).indexOf(parent) !== -1) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getFrames(win : CrossDomainWindowType) : $ReadOnlyArray<CrossDomainWindowType> {\n\n    const result = [];\n\n    let frames;\n\n    try {\n        frames = win.frames;\n    } catch (err) {\n        frames = win;\n    }\n\n    let len;\n\n    try {\n        len = frames.length;\n    } catch (err) {\n        // pass\n    }\n\n    if (len === 0) {\n        return result;\n    }\n\n    if (len) {\n        for (let i = 0; i < len; i++) {\n\n            let frame;\n\n            try {\n                frame = frames[i];\n            } catch (err) {\n                continue;\n            }\n\n            result.push(frame);\n        }\n\n        return result;\n    }\n\n    for (let i = 0; i < 100; i++) {\n        let frame;\n\n        try {\n            frame = frames[i];\n        } catch (err) {\n            return result;\n        }\n\n        if (!frame) {\n            return result;\n        }\n\n        result.push(frame);\n    }\n\n    return result;\n}\n\n\nexport function getAllChildFrames(win : CrossDomainWindowType) : $ReadOnlyArray<CrossDomainWindowType> {\n\n    const result = [];\n\n    for (const frame of getFrames(win)) {\n        result.push(frame);\n\n        for (const childFrame of getAllChildFrames(frame)) {\n            result.push(childFrame);\n        }\n    }\n\n    return result;\n}\n\nexport function getTop(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    try {\n        if (win.top) {\n            return win.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    if (getParent(win) === win) {\n        return win;\n    }\n\n    try {\n        if (isAncestorParent(window, win) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (isAncestorParent(win, window) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    for (const frame of getAllChildFrames(win)) {\n        try {\n            if (frame.top) {\n                return frame.top;\n            }\n        } catch (err) {\n            // pass\n        }\n\n        if (getParent(frame) === frame) {\n            return frame;\n        }\n    }\n}\n\nexport function getNextOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    return getOpener(getTop(win) || win);\n}\n\nexport function getUltimateTop(win? : CrossDomainWindowType = window) : CrossDomainWindowType {\n    const opener = getNextOpener(win);\n\n    if (opener) {\n        return getUltimateTop(opener);\n    }\n\n    return top;\n}\n\nexport function getAllFramesInWindow(win : CrossDomainWindowType) : $ReadOnlyArray<CrossDomainWindowType> {\n    const top = getTop(win);\n\n    if (!top) {\n        throw new Error(`Can not determine top window`);\n    }\n\n    let result = [ ...getAllChildFrames(top), top ];\n\n    // Win may be in shadow dom\n    if (result.indexOf(win) === -1) {\n        result = [ ...result, win, ...getAllChildFrames(win) ];\n    }\n\n    return result;\n}\n\nexport function getAllWindows(win? : CrossDomainWindowType = window) : $ReadOnlyArray<CrossDomainWindowType> {\n    const frames = getAllFramesInWindow(win);\n    const opener = getNextOpener(win);\n\n    if (opener) {\n        return [ ...getAllWindows(opener), ...frames ];\n    } else {\n        return frames;\n    }\n}\n\nexport function isTop(win : CrossDomainWindowType) : boolean {\n    return win === getTop(win);\n}\n\nexport function isFrameWindowClosed(frame : HTMLIFrameElement) : boolean {\n\n    if (!frame.contentWindow) {\n        return true;\n    }\n\n    if (!frame.parentNode) {\n        return true;\n    }\n\n    const doc = frame.ownerDocument;\n\n    if (doc && doc.documentElement && !doc.documentElement.contains(frame)) {\n        let parent = frame;\n\n        while (parent.parentNode && parent.parentNode !== parent) {\n            parent = parent.parentNode;\n        }\n\n        // $FlowFixMe\n        if (!parent.host || !doc.documentElement.contains(parent.host)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction safeIndexOf<T>(collection : $ReadOnlyArray<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\nconst iframeWindows = [];\nconst iframeFrames = [];\n\nexport function isWindowClosed(win : CrossDomainWindowType, allowMock : boolean = true) : boolean {\n\n    try {\n        if (win === window) {\n            return false;\n        }\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (!win) {\n            return true;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (win.closed) {\n            return true;\n        }\n\n    } catch (err) {\n\n        // I love you so much IE\n\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    if (allowMock && isSameDomain(win)) {\n        try {\n            // $FlowFixMe\n            if (win.mockclosed) {\n                return true;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    // Mobile safari\n\n    try {\n        if (!win.parent || !win.top) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    // Yes, this actually happens in IE. win === win errors out when the window\n    // is from an iframe, and the iframe was removed from the page.\n\n    try {\n        noop(win === win); // eslint-disable-line no-self-compare\n    } catch (err) {\n        return true;\n    }\n\n    // IE orphaned frame\n\n    const iframeIndex = safeIndexOf(iframeWindows, win);\n\n    if (iframeIndex !== -1) {\n        const frame = iframeFrames[iframeIndex];\n\n        if (frame && isFrameWindowClosed(frame)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction cleanIframes() {\n    for (let i = 0; i < iframeWindows.length; i++) {\n        let closed = false;\n\n        try {\n            closed = iframeWindows[i].closed;\n        } catch (err) {\n            // pass\n        }\n\n        if (closed) {\n            iframeFrames.splice(i, 1);\n            iframeWindows.splice(i, 1);\n        }\n    }\n}\n\nexport function linkFrameWindow(frame : HTMLIFrameElement) {\n\n    cleanIframes();\n\n    if (frame && frame.contentWindow) {\n        try {\n            iframeWindows.push(frame.contentWindow);\n            iframeFrames.push(frame);\n        } catch (err) {\n            // pass\n        }\n    }\n}\n\nexport function getUserAgent(win : ?SameDomainWindowType) : string {\n    win = win || window;\n    return win.navigator.mockUserAgent || win.navigator.userAgent;\n}\n\n\nexport function getFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    const winFrames = getFrames(win);\n\n    for (const childFrame of winFrames) {\n        try {\n            // $FlowFixMe\n            if (isSameDomain(childFrame) && childFrame.name === name && winFrames.indexOf(childFrame) !== -1) {\n                return childFrame;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    try {\n        // $FlowFixMe\n        if (winFrames.indexOf(win.frames[name]) !== -1) {\n            // $FlowFixMe\n            return win.frames[name];\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (winFrames.indexOf(win[name]) !== -1) {\n            return win[name];\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function findChildFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    const frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    for (const childFrame of getFrames(win)) {\n        const namedFrame = findChildFrameByName(childFrame, name);\n\n        if (namedFrame) {\n            return namedFrame;\n        }\n    }\n}\n\nexport function findFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n    const frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    const top = getTop(win) || win;\n\n    return findChildFrameByName(top, name);\n}\n\nexport function isParent(win : CrossDomainWindowType, frame : CrossDomainWindowType) : boolean {\n\n    const frameParent = getParent(frame);\n\n    if (frameParent) {\n        return frameParent === win;\n    }\n\n    for (const childFrame of getFrames(win)) {\n        if (childFrame === frame) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isOpener(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    return parent === getOpener(child);\n}\n\nexport function getAncestor(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    win = win || window;\n\n    const opener = getOpener(win);\n\n    if (opener) {\n        return opener;\n    }\n\n    const parent = getParent(win);\n\n    if (parent) {\n        return parent;\n    }\n}\n\nexport function getAncestors(win : CrossDomainWindowType) : $ReadOnlyArray<CrossDomainWindowType> {\n\n    const results = [];\n\n    let ancestor = win;\n\n    while (ancestor) {\n        ancestor = getAncestor(ancestor);\n        if (ancestor) {\n            results.push(ancestor);\n        }\n    }\n\n    return results;\n}\n\n\nexport function isAncestor(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    const actualParent = getAncestor(child);\n\n    if (actualParent) {\n        if (actualParent === parent) {\n            return true;\n        }\n\n        return false;\n    }\n\n    if (child === parent) {\n        return false;\n    }\n\n    if (getTop(child) === child) {\n        return false;\n    }\n\n    for (const frame of getFrames(parent)) {\n        if (frame === child) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isPopup(win? : CrossDomainWindowType = window) : boolean {\n    return Boolean(getOpener(win));\n}\n\nexport function isIframe(win? : CrossDomainWindowType = window) : boolean {\n    return Boolean(getParent(win));\n}\n\nexport function isFullpage(win? : CrossDomainWindowType = window) : boolean {\n    return Boolean(!isIframe(win) && !isPopup(win));\n}\n\nfunction anyMatch(collection1, collection2) : boolean {\n\n    for (const item1 of collection1) {\n        for (const item2 of collection2) {\n            if (item1 === item2) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nexport function getDistanceFromTop(win : CrossDomainWindowType = window) : number {\n    let distance = 0;\n    let parent = win;\n\n    while (parent) {\n        parent = getParent(parent);\n        if (parent) {\n            distance += 1;\n        }\n    }\n\n    return distance;\n}\n\nexport function getNthParent(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    let parent = win;\n\n    for (let i = 0; i < n; i++) {\n        if (!parent) {\n            return;\n        }\n\n        parent = getParent(parent);\n    }\n\n    return parent;\n}\n\nexport function getNthParentFromTop(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    return getNthParent(win, getDistanceFromTop(win) - n);\n}\n\nexport function isSameTopWindow(win1 : CrossDomainWindowType, win2 : CrossDomainWindowType) : boolean {\n\n    const top1 = getTop(win1) || win1;\n    const top2 = getTop(win2) || win2;\n\n    try {\n        if (top1 && top2) {\n            if (top1 === top2) {\n                return true;\n            }\n\n            return false;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    const allFrames1 = getAllFramesInWindow(win1);\n    const allFrames2 = getAllFramesInWindow(win2);\n\n    if (anyMatch(allFrames1, allFrames2)) {\n        return true;\n    }\n\n    const opener1 = getOpener(top1);\n    const opener2 = getOpener(top2);\n\n    if (opener1 && anyMatch(getAllFramesInWindow(opener1), allFrames2)) {\n        return false;\n    }\n\n    if (opener2 && anyMatch(getAllFramesInWindow(opener2), allFrames1)) {\n        return false;\n    }\n\n    return false;\n}\n\nexport function matchDomain(pattern : DomainMatcher, origin : DomainMatcher) : boolean {\n\n    if (typeof pattern === 'string') {\n\n        if (typeof origin === 'string') {\n            return pattern === WILDCARD || origin === pattern;\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n    }\n\n    if (isRegex(pattern)) {\n\n        if (isRegex(origin)) {\n            return pattern.toString() === origin.toString();\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n\n        // $FlowFixMe\n        return Boolean(origin.match(pattern));\n    }\n\n    if (Array.isArray(pattern)) {\n\n        if (Array.isArray(origin)) {\n            return JSON.stringify(pattern) === JSON.stringify(origin);\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        return pattern.some(subpattern => matchDomain(subpattern, origin));\n    }\n\n    return false;\n}\n\nexport function stringifyDomainPattern(pattern : DomainMatcher) : string {\n    if (Array.isArray(pattern)) {\n        return `(${ pattern.join(' | ') })`;\n    } else if (isRegex(pattern)) {\n        return `RegExp(${ pattern.toString() })`;\n    } else {\n        return pattern.toString();\n    }\n}\n\nexport function getDomainFromUrl(url : string) : string {\n\n    let domain;\n\n    if (url.match(/^(https?|mock|file):\\/\\//)) {\n        domain = url;\n    } else {\n        return getDomain();\n    }\n\n    domain = domain.split('/').slice(0, 3).join('/');\n\n    return domain;\n}\n\nexport function onCloseWindow(win : CrossDomainWindowType, callback : Function, delay : number = 1000, maxtime : number = Infinity) : {| cancel : () => void |} {\n\n    let timeout;\n\n    const check = () => {\n\n        if (isWindowClosed(win)) {\n\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n\n            return callback();\n        }\n\n        if (maxtime <= 0) {\n            clearTimeout(timeout);\n        } else {\n            maxtime -= delay;\n            timeout = setTimeout(check, delay);\n        }\n    };\n\n    check();\n\n    return {\n        cancel() {\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n        }\n    };\n}\n\n// eslint-disable-next-line complexity\nexport function isWindow(obj : Object) : boolean {\n\n    try {\n        if (obj === window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        // $FlowFixMe method-unbinding\n        if (Object.prototype.toString.call(obj) === '[object Window]') {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (window.Window && obj instanceof window.Window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.self === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.parent === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.top === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (noop(obj === obj) === '__unlikely_value__') { // eslint-disable-line no-self-compare\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (obj && obj.__cross_domain_utils_window_check__ === '__unlikely_value__') {\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if ('postMessage' in obj && 'self' in obj && 'location' in obj) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined' && typeof window.location !== 'undefined');\n}\n\nexport function isCurrentDomain(domain : string) : boolean {\n    if (!isBrowser()) {\n        return false;\n    }\n\n    return (getDomain() === domain);\n}\n\nexport function isMockDomain(domain : string) : boolean {\n    return domain.indexOf(PROTOCOL.MOCK) === 0;\n}\n\nexport function normalizeMockUrl(url : string) : string {\n    if (!isMockDomain(getDomainFromUrl(url))) {\n        return url;\n    }\n\n    if (!__TEST__) {\n        throw new Error(`Mock urls not supported out of test mode`);\n    }\n\n    return url.replace(/^mock:\\/\\/[^/]+/, getActualDomain(window));\n}\n\nexport function getFrameForWindow(win : CrossDomainWindowType) : ?HTMLElement {\n    if (isSameDomain(win)) {\n        return assertSameDomain(win).frameElement;\n    }\n\n    for (const frame of document.querySelectorAll('iframe')) {\n        if (frame && frame.contentWindow && frame.contentWindow === win) {\n            return frame;\n        }\n    }\n}\n\nexport function closeWindow(win : CrossDomainWindowType) {\n    if (isIframe(win)) {\n        const frame = getFrameForWindow(win);\n        if (frame && frame.parentElement) {\n            frame.parentElement.removeChild(frame);\n            return;\n        }\n    }\n\n    try {\n        win.close();\n    } catch (err) {\n        // pass\n    }\n}\n","/* @flow */\n\nexport function isPromise(item : mixed) : boolean {\n    try {\n        if (!item) {\n            return false;\n        }\n\n        if (typeof Promise !== 'undefined' && item instanceof Promise) {\n            return true;\n        }\n\n        if (typeof window !== 'undefined' && typeof window.Window === 'function' && item instanceof window.Window) {\n            return false;\n        }\n\n        if (typeof window !== 'undefined' && typeof window.constructor === 'function' && item instanceof window.constructor) {\n            return false;\n        }\n\n        const toString = ({}).toString;\n\n        if (toString) {\n            const name = toString.call(item);\n\n            if (name === '[object Window]' || name === '[object global]' || name === '[object DOMWindow]') {\n                return false;\n            }\n        }\n\n        if (typeof item.then === 'function') {\n            return true;\n        }\n    } catch (err) {\n        return false;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nconst dispatchedErrors = [];\nconst possiblyUnhandledPromiseHandlers : Array<(mixed, promise? : ZalgoPromise<mixed>) => void> = [];\n\nexport function dispatchPossiblyUnhandledError<T>(err : mixed, promise : ZalgoPromise<T>) {\n\n    if (dispatchedErrors.indexOf(err) !== -1) {\n        return;\n    }\n\n    dispatchedErrors.push(err);\n\n    setTimeout(() => {\n        if (__DEBUG__) {\n            // $FlowFixMe\n            throw new Error(`${ err.stack || err.toString() }\\n\\nFrom promise:\\n\\n${ promise.stack }`);\n        }\n\n        throw err;\n    }, 1);\n\n    for (let j = 0; j < possiblyUnhandledPromiseHandlers.length; j++) {\n        // $FlowFixMe\n        possiblyUnhandledPromiseHandlers[j](err, promise);\n    }\n}\n\nexport function onPossiblyUnhandledException(handler : (mixed, promise? : ZalgoPromise<mixed>) => void) : {| cancel : () => void |} {\n    possiblyUnhandledPromiseHandlers.push(handler);\n\n    return {\n        cancel() {\n            possiblyUnhandledPromiseHandlers.splice(possiblyUnhandledPromiseHandlers.indexOf(handler), 1);\n        }\n    };\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nlet activeCount = 0;\nlet flushPromise;\n\nfunction flushActive() {\n    if (!activeCount && flushPromise) {\n        const promise = flushPromise;\n        flushPromise = null;\n        promise.resolve();\n    }\n}\n\nexport function startActive() {\n    activeCount += 1;\n}\n\nexport function endActive() {\n    activeCount -= 1;\n    flushActive();\n}\n\nexport function awaitActive(Zalgo : Class<ZalgoPromise<*>>) : ZalgoPromise<void> { // eslint-disable-line no-undef\n    const promise = flushPromise = flushPromise || new Zalgo();\n    flushActive();\n    return promise;\n}\n","/* @flow */\n\nimport { isPromise } from './utils';\nimport { onPossiblyUnhandledException, dispatchPossiblyUnhandledError } from './exceptions';\nimport { startActive, endActive, awaitActive } from './flush';\n\nexport class ZalgoPromise<R : mixed> {\n\n    resolved : boolean\n    rejected : boolean\n    errorHandled : boolean\n    value : R\n    error : mixed\n    // eslint-disable-next-line flowtype/no-mutable-array\n    handlers : Array<{|\n        promise : ZalgoPromise<*>,\n        onSuccess : void | (result : R) => mixed,\n        onError : void | (error : mixed) => mixed\n    |}>\n    dispatching : boolean\n    stack : string\n\n    constructor(handler : ?(resolve : (result : R) => void, reject : (error : mixed) => void) => void) {\n\n        this.resolved = false;\n        this.rejected = false;\n        this.errorHandled = false;\n\n        this.handlers = [];\n\n        if (handler) {\n\n            let result;\n            let error;\n            let resolved = false;\n            let rejected = false;\n            let isAsync = false;\n\n            startActive();\n\n            try {\n                handler(res => {\n                    if (isAsync) {\n                        this.resolve(res);\n                    } else {\n                        resolved = true;\n                        result = res;\n                    }\n\n                }, err => {\n                    if (isAsync) {\n                        this.reject(err);\n                    } else {\n                        rejected = true;\n                        error = err;\n                    }\n                });\n\n            } catch (err) {\n                endActive();\n                this.reject(err);\n                return;\n            }\n\n            endActive();\n\n            isAsync = true;\n\n            if (resolved) {\n                // $FlowFixMe\n                this.resolve(result);\n            } else if (rejected) {\n                this.reject(error);\n            }\n        }\n\n        if (__DEBUG__) {\n            try {\n                throw new Error(`ZalgoPromise`);\n            } catch (err) {\n                this.stack = err.stack;\n            }\n        }\n    }\n\n    resolve(result : R) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(result)) {\n            throw new Error('Can not resolve promise with another promise');\n        }\n\n        this.resolved = true;\n        this.value = result;\n        this.dispatch();\n\n        return this;\n    }\n\n    reject(error : mixed) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(error)) {\n            throw new Error('Can not reject promise with another promise');\n        }\n\n        if (!error) {\n            // $FlowFixMe\n            const err = (error && typeof error.toString === 'function' ? error.toString() : Object.prototype.toString.call(error));\n            error = new Error(`Expected reject to be called with Error, got ${ err }`);\n        }\n\n        this.rejected = true;\n        this.error = error;\n\n        if (!this.errorHandled) {\n            setTimeout(() => {\n                if (!this.errorHandled) {\n                    dispatchPossiblyUnhandledError(error, this);\n                }\n            }, 1);\n        }\n\n        this.dispatch();\n\n        return this;\n    }\n\n    asyncReject(error : mixed) : ZalgoPromise<R> {\n        this.errorHandled = true;\n        this.reject(error);\n        return this;\n    }\n    \n    dispatch() {\n\n        const { dispatching, resolved, rejected, handlers } = this;\n\n        if (dispatching) {\n            return;\n        }\n\n        if (!resolved && !rejected) {\n            return;\n        }\n\n        this.dispatching = true;\n        startActive();\n\n        const chain = <T>(firstPromise : ZalgoPromise<T>, secondPromise : ZalgoPromise<T>) => {\n            return firstPromise.then(res => {\n                secondPromise.resolve(res);\n            }, err => {\n                secondPromise.reject(err);\n            });\n        };\n\n        for (let i = 0; i < handlers.length; i++) {\n\n            const { onSuccess, onError, promise } = handlers[i];\n\n            let result;\n\n            if (resolved) {\n\n                try {\n                    result = onSuccess ? onSuccess(this.value) : this.value;\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n\n            } else if (rejected) {\n\n                if (!onError) {\n                    promise.reject(this.error);\n                    continue;\n                }\n\n                try {\n                    result = onError(this.error);\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n            }\n\n            if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n                const promiseResult : ZalgoPromise<*> = result;\n\n                if (promiseResult.resolved) {\n                    promise.resolve(promiseResult.value);\n                } else {\n                    promise.reject(promiseResult.error);\n                }\n\n                promiseResult.errorHandled = true;\n\n            } else if (isPromise(result)) {\n\n                if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n                    if (result.resolved) {\n                        promise.resolve(result.value);\n                    } else {\n                        promise.reject(result.error);\n                    }\n\n                } else {\n                    // $FlowFixMe\n                    chain(result, promise);\n                }\n\n            } else {\n\n                promise.resolve(result);\n            }\n        }\n\n        handlers.length = 0;\n        this.dispatching = false;\n        endActive();\n    }\n\n    then<X, Y>(onSuccess : void | (result : R) => (ZalgoPromise<X> | Y), onError : void | (error : mixed) => (ZalgoPromise<X> | Y)) : ZalgoPromise<X | Y> {\n\n        if (onSuccess && typeof onSuccess !== 'function' && !onSuccess.call) {\n            throw new Error('Promise.then expected a function for success handler');\n        }\n\n        if (onError && typeof onError !== 'function' && !onError.call) {\n            throw new Error('Promise.then expected a function for error handler');\n        }\n\n        const promise = new ZalgoPromise();\n\n        this.handlers.push({\n            promise,\n            onSuccess,\n            onError\n        });\n\n        this.errorHandled = true;\n\n        this.dispatch();\n\n        return promise;\n    }\n\n    catch<X, Y>(onError : (error : mixed) => ZalgoPromise<X> | Y) : ZalgoPromise<X | Y> {\n        // $FlowFixMe incompatible-call\n        const resultPromise : ZalgoPromise<X | Y> = this.then(undefined, onError);\n        return resultPromise;\n    }\n\n    finally(onFinally : () => mixed) : ZalgoPromise<R> {\n\n        if (onFinally && typeof onFinally !== 'function' && !onFinally.call) {\n            throw new Error('Promise.finally expected a function');\n        }\n\n        return this.then((result) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    return result;\n                });\n        }, (err) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    throw err;\n                });\n        });\n    }\n\n    timeout(time : number, err : ?Error) : ZalgoPromise<R> {\n\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        const timeout = setTimeout(() => {\n\n            if (this.resolved || this.rejected) {\n                return;\n            }\n\n            this.reject(err || new Error(`Promise timed out after ${ time }ms`));\n\n        }, time);\n\n        return this.then(result => {\n            clearTimeout(timeout);\n            return result;\n        });\n    }\n\n    // $FlowFixMe\n    toPromise() : Promise<R> {\n        // $FlowFixMe\n        if (typeof Promise === 'undefined') {\n            throw new TypeError(`Could not find Promise`);\n        }\n        // $FlowFixMe\n        return Promise.resolve(this); // eslint-disable-line compat/compat\n    }\n\n    lazy() : ZalgoPromise<R> {\n        this.errorHandled = true;\n        return this;\n    }\n\n    static resolve<X, Y>(value : ZalgoPromise<X> | Y) : ZalgoPromise<X | Y> {\n\n        if (value instanceof ZalgoPromise) {\n            // $FlowFixMe incompatible-type-arg\n            const result : ZalgoPromise<X | Y> = value;\n            return result;\n        }\n\n        if (isPromise(value)) {\n            // $FlowFixMe\n            return new ZalgoPromise((resolve, reject) => value.then(resolve, reject));\n        }\n\n        return new ZalgoPromise().resolve(value);\n    }\n\n    static reject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().reject(error);\n    }\n\n    static asyncReject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().asyncReject(error);\n    }\n\n    static all<X : $ReadOnlyArray<mixed>>(promises : X) : ZalgoPromise<$TupleMap<X, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n\n        const promise = new ZalgoPromise();\n        let count = promises.length;\n        // eslint-disable-next-line no-undef\n        const results = ([] : $TupleMap<X, <Y>(ZalgoPromise<Y> | Y) => Y>).slice();\n\n        if (!count) {\n            promise.resolve(results);\n            return promise;\n        }\n\n        const chain = <T>(i : number, firstPromise : ZalgoPromise<T>, secondPromise : ZalgoPromise<T>) => {\n            return firstPromise.then(res => {\n                results[i] = res;\n                count -= 1;\n                if (count === 0) {\n                    promise.resolve(results);\n                }\n            }, err => {\n                secondPromise.reject(err);\n            });\n        };\n\n        for (let i = 0; i < promises.length; i++) {\n            const prom = promises[i];\n\n            if (prom instanceof ZalgoPromise) {\n                if (prom.resolved) {\n                    results[i] = prom.value;\n                    count -= 1;\n                    continue;\n                }\n            } else if (!isPromise(prom)) {\n                results[i] = prom;\n                count -= 1;\n                continue;\n            }\n\n            chain(i, ZalgoPromise.resolve(prom), promise);\n        }\n\n        if (count === 0) {\n            promise.resolve(results);\n        }\n\n        return promise;\n    }\n\n    static hash<O : Object>(promises : O) : ZalgoPromise<$ObjMap<O, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n        const result = {};\n        const awaitPromises = [];\n\n        for (const key in promises) {\n            if (promises.hasOwnProperty(key)) {\n                const value = promises[key];\n\n                if (isPromise(value)) {\n                    awaitPromises.push(value.then(res => {\n                        result[key] = res;\n                    }));\n                } else {\n                    result[key] = value;\n                }\n            }\n        }\n        \n        return ZalgoPromise.all(awaitPromises).then(() => result);\n    }\n\n    static map<T, X>(items : $ReadOnlyArray<T>, method : (T) => (ZalgoPromise<X> | X)) : ZalgoPromise<$ReadOnlyArray<X>> {\n        // $FlowFixMe\n        return ZalgoPromise.all(items.map(method));\n    }\n\n    static onPossiblyUnhandledException(handler : (err : mixed) => void) : {| cancel : () => void |} {\n        return onPossiblyUnhandledException(handler);\n    }\n\n    static try<X, Y, C : mixed, A : $ReadOnlyArray<mixed>>(method : (...args : $ReadOnlyArray<mixed>) => (ZalgoPromise<X> | Y), context? : C, args? : A) : ZalgoPromise<X | Y> {\n\n        if (method && typeof method !== 'function' && !method.call) {\n            throw new Error('Promise.try expected a function');\n        }\n\n        let result : ZalgoPromise<X> | Y;\n\n        startActive();\n        \n        try {\n            result = method.apply(context, args || []);\n        } catch (err) {\n            endActive();\n            return ZalgoPromise.reject(err);\n        }\n\n        endActive();\n\n        // $FlowFixMe incompatible-call\n        const resultPromise = ZalgoPromise.resolve(result);\n\n        return resultPromise;\n    }\n\n    static delay(delay : number) : ZalgoPromise<void> {\n        return new ZalgoPromise(resolve => {\n            setTimeout(resolve, delay);\n        });\n    }\n\n    static isPromise(value : mixed) : boolean {\n\n        if (value && value instanceof ZalgoPromise) {\n            return true;\n        }\n\n        return isPromise(value);\n    }\n\n    static flush() : ZalgoPromise<void> {\n        return awaitActive(ZalgoPromise);\n    }\n}\n","/* @flow */\n\nexport function safeIndexOf<T>(collection : $ReadOnlyArray<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : $ReadOnlyArray<mixed>) {\n    // pass\n}\n","/* @flow */\n\nimport { isWindow, isWindowClosed } from 'cross-domain-utils/src';\n\nimport { hasNativeWeakMap } from './native';\nimport { noop, safeIndexOf } from './util';\n\nexport class CrossDomainSafeWeakMap<K : Object, V : mixed> {\n\n    name : string\n    weakmap : ?WeakMap<K, V>\n    // eslint-disable-next-line flowtype/no-mutable-array\n    keys : Array<K>\n    // eslint-disable-next-line flowtype/no-mutable-array\n    values : Array<V>\n\n    constructor() {\n        // eslint-disable-next-line no-bitwise\n        this.name = `__weakmap_${ Math.random() * 1e9 >>> 0 }__`;\n\n        if (hasNativeWeakMap()) {\n            try {\n                this.weakmap = new WeakMap();\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this.keys  = [];\n        this.values = [];\n    }\n\n    _cleanupClosedWindows() {\n\n        const weakmap = this.weakmap;\n        const keys = this.keys;\n\n        for (let i = 0; i < keys.length; i++) {\n            const value = keys[i];\n\n            if (isWindow(value) && isWindowClosed(value)) {\n\n                if (weakmap) {\n                    try {\n                        weakmap.delete(value);\n                    } catch (err) {\n                        // pass\n                    }\n                }\n\n                keys.splice(i, 1);\n                this.values.splice(i, 1);\n\n                i -= 1;\n            }\n        }\n    }\n\n    isSafeToReadWrite(key : K) : boolean {\n\n        if (isWindow(key)) {\n            return false;\n        }\n\n        try {\n            noop(key && key.self);\n            noop(key && key[this.name]);\n        } catch (err) {\n            return false;\n        }\n\n        return true;\n    }\n\n    set(key : K, value : V) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        const weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.set(key, value);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                const name = this.name;\n                const entry = key[name];\n\n                if (entry && entry[0] === key) {\n                    entry[1] = value;\n                } else {\n                    Object.defineProperty(key, name, {\n                        value:    [ key, value ],\n                        writable: true\n                    });\n                }\n\n                return;\n\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        const keys = this.keys;\n        const values = this.values;\n        const index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            keys.push(key);\n            values.push(value);\n        } else {\n            values[index] = value;\n        }\n    }\n\n    get(key : K) : V | void {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        const weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return weakmap.get(key);\n                }\n                \n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                const entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return entry[1];\n                }\n\n                return;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        const keys = this.keys;\n        const index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            return;\n        }\n\n        return this.values[index];\n    }\n\n    delete(key : K) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        const weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.delete(key);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                const entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    entry[0] = entry[1] = undefined;\n                }\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        const keys = this.keys;\n        const index = safeIndexOf(keys, key);\n\n        if (index !== -1) {\n            keys.splice(index, 1);\n            this.values.splice(index, 1);\n        }\n    }\n\n    has(key : K) : boolean {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        const weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return true;\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                const entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return true;\n                }\n\n                return false;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        const index = safeIndexOf(this.keys, key);\n        return index !== -1;\n    }\n\n    getOrSet(key : K, getter : () => V) : V {\n        if (this.has(key)) {\n            // $FlowFixMe\n            return this.get(key);\n        }\n\n        const value = getter();\n        this.set(key, value);\n        return value;\n    }\n}\n","\n/* @flow */\n/* eslint max-lines: 0 */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport type { CancelableType } from './types';\n\nexport function getFunctionName <T : Function>(fn : T) : string {\n    return fn.name || fn.__name__ || fn.displayName || 'anonymous';\n}\n\nexport function setFunctionName <T : Function>(fn : T, name : string) : T {\n    try {\n        delete fn.name;\n        fn.name = name;\n    } catch (err) {\n        // pass\n    }\n\n    fn.__name__ = fn.displayName = name;\n    return fn;\n}\n\nexport function base64encode(str : string) : string {\n    if (typeof btoa === 'function') {\n        return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, (m, p1) => {\n            return String.fromCharCode(parseInt(p1, 16));\n        })).replace(/[=]/g, '');\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'utf8').toString('base64').replace(/[=]/g, '');\n    }\n\n    throw new Error(`Can not find window.btoa or Buffer`);\n}\n\nexport function base64decode(str : string) : string {\n    if (typeof atob === 'function') {\n        // $FlowFixMe[method-unbinding]\n        return decodeURIComponent(Array.prototype.map.call(atob(str), c => {\n            // eslint-disable-next-line prefer-template\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'base64').toString('utf8');\n    }\n\n    throw new Error(`Can not find window.atob or Buffer`);\n}\n\nexport function uniqueID() : string {\n\n    const chars = '0123456789abcdef';\n\n    const randomID = 'xxxxxxxxxx'.replace(/./g, () => {\n        return chars.charAt(Math.floor(Math.random() * chars.length));\n    });\n\n    const timeID = base64encode(\n        new Date().toISOString().slice(11, 19).replace('T', '.')\n    ).replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n    return `uid_${ randomID }_${ timeID }`;\n}\n\nexport function getGlobal() : Object {\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    if (typeof __GLOBAL__ !== 'undefined') {\n        return __GLOBAL__;\n    }\n    throw new Error(`No global found`);\n}\n\nlet objectIDs;\n\nexport function getObjectID(obj : Object) : string {\n\n    objectIDs = objectIDs || new WeakMap();\n\n    if (obj === null || obj === undefined || (typeof obj !== 'object' && typeof obj !== 'function')) {\n        throw new Error(`Invalid object`);\n    }\n\n    let uid = objectIDs.get(obj);\n\n    if (!uid) {\n        uid = `${ typeof obj }:${ uniqueID() }`;\n        objectIDs.set(obj, uid);\n    }\n\n    return uid;\n}\n\nfunction serializeArgs<T>(args : $ReadOnlyArray<T>) : string {\n    try {\n        // $FlowFixMe[method-unbinding]\n        return JSON.stringify(Array.prototype.slice.call(args), (subkey, val) => {\n\n            // Treat each distinct function as unique for purposes of memoization\n            // e.g. even if someFunction.stringify() is the same, we may use a different memoize cache\n            // if the actual function is different.\n            if (typeof val === 'function') {\n                return `memoize[${ getObjectID(val) }]`;\n            }\n\n            // Detect DOM elements\n            // By default JSON.stringify(domElement) returns '{}'. This ensures that stays true even for non-standard\n            // elements (e.g. React-rendered dom elements) with custom properties\n            if (\n                (typeof window !== 'undefined' && val instanceof window.Element) ||\n                (val !== null && typeof val === 'object' && val.nodeType === 1 && typeof val.style === 'object' && typeof val.ownerDocument === 'object')\n            ) {\n                return {};\n            }\n\n            return val;\n        });\n    } catch (err) {\n        throw new Error(`Arguments not serializable -- can not be used to memoize`);\n    }\n}\n\nexport function getEmptyObject() : {||} {\n    // $FlowFixMe\n    return {};\n}\n\ntype MemoizeOptions = {|\n    name? : string,\n    time? : number,\n    thisNamespace? : boolean\n|};\n\nconst getDefaultMemoizeOptions = () : MemoizeOptions => {\n    // $FlowFixMe\n    return {};\n};\n\nexport type Memoized<F> = F & {| reset : () => void |};\n\nlet memoizeGlobalIndex = 0;\nlet memoizeGlobalIndexValidFrom = 0;\n\nexport function memoize<F : Function>(method : F, options? : MemoizeOptions = getDefaultMemoizeOptions()) : Memoized<F> {\n    const { thisNamespace = false, time: cacheTime } = options;\n\n    let simpleCache;\n    let thisCache;\n\n    let memoizeIndex = memoizeGlobalIndex;\n    memoizeGlobalIndex += 1;\n\n    const memoizedFunction = function memoizedFunction(...args) : mixed {\n        if (memoizeIndex < memoizeGlobalIndexValidFrom) {\n            simpleCache = null;\n            thisCache = null;\n            memoizeIndex = memoizeGlobalIndex;\n            memoizeGlobalIndex += 1;\n        }\n\n        let cache;\n\n        if (thisNamespace) {\n            thisCache = thisCache || new WeakMap();\n            cache = thisCache.getOrSet(this, getEmptyObject);\n        } else {\n            cache = simpleCache = simpleCache || {};\n        }\n\n        let cacheKey;\n\n        try {\n            cacheKey = serializeArgs(args);\n        } catch {\n            return method.apply(this, arguments);\n        }\n\n        let cacheResult = cache[cacheKey];\n\n        if (cacheResult && cacheTime && (Date.now() - cacheResult.time) < cacheTime) {\n            delete cache[cacheKey];\n            cacheResult = null;\n        }\n\n        if (cacheResult) {\n            return cacheResult.value;\n        }\n\n        const time  = Date.now();\n        const value = method.apply(this, arguments);\n\n        cache[cacheKey] = { time, value };\n\n        return value;\n    };\n\n    memoizedFunction.reset = () => {\n        simpleCache = null;\n        thisCache = null;\n    };\n\n    // $FlowFixMe\n    const result : F = memoizedFunction;\n\n    return setFunctionName(result, `${ options.name || getFunctionName(method) }::memoized`);\n}\n\nmemoize.clear = () => {\n    memoizeGlobalIndexValidFrom = memoizeGlobalIndex;\n};\n\nexport function promiseIdentity<T : mixed>(item : ZalgoPromise<T> | T) : ZalgoPromise<T> {\n    // $FlowFixMe\n    return ZalgoPromise.resolve(item);\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoizePromise<R>(method : (...args : $ReadOnlyArray<any>) => ZalgoPromise<R>) : ((...args : $ReadOnlyArray<any>) => ZalgoPromise<R>) {\n    let cache = {};\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedPromiseFunction(...args : $ReadOnlyArray<any>) : ZalgoPromise<R> {\n        const key : string = serializeArgs(args);\n\n        if (cache.hasOwnProperty(key)) {\n            return cache[key];\n        }\n\n        cache[key] = ZalgoPromise.try(() => method.apply(this, arguments))\n            .finally(() => {\n                delete cache[key];\n            });\n\n        return cache[key];\n    }\n\n    memoizedPromiseFunction.reset = () => {\n        cache = {};\n    };\n\n    return setFunctionName(memoizedPromiseFunction, `${ getFunctionName(method) }::promiseMemoized`);\n}\n\ntype PromisifyOptions = {|\n    name ? : string\n|};\n\nconst getDefaultPromisifyOptions = () : PromisifyOptions => {\n    // $FlowFixMe\n    return {};\n};\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function promisify<R>(method : (...args : $ReadOnlyArray<any>) => R, options : PromisifyOptions = getDefaultPromisifyOptions()) : ((...args : $ReadOnlyArray<any>) => ZalgoPromise<R>) {\n    function promisifiedFunction() : ZalgoPromise<R> {\n        return ZalgoPromise.try(method, this, arguments);\n    }\n\n    if (options.name) {\n        promisifiedFunction.displayName = `${ options.name }:promisified`;\n    }\n\n    return setFunctionName(promisifiedFunction, `${ getFunctionName(method) }::promisified`);\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function inlineMemoize<R>(method : (...args : $ReadOnlyArray<any>) => R, logic : (...args : $ReadOnlyArray<any>) => R, args : $ReadOnlyArray<any> = []) : R {\n    // $FlowFixMe\n    const cache : {| [string] : R |} = method.__inline_memoize_cache__ = method.__inline_memoize_cache__ || {};\n    const key = serializeArgs(args);\n\n    if (cache.hasOwnProperty(key)) {\n        return cache[key];\n    }\n\n    const result = cache[key] = logic(...args);\n\n    return result;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : $ReadOnlyArray<mixed>) {\n    // pass\n}\n\nexport function once(method : Function) : Function {\n    let called = false;\n\n    const onceFunction = function() : mixed {\n        if (!called) {\n            called = true;\n            return method.apply(this, arguments);\n        }\n    };\n\n    return setFunctionName(onceFunction, `${ getFunctionName(method) }::once`);\n}\n\nexport function hashStr(str : string) : number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash += str[i].charCodeAt(0) * Math.pow((i % 10) + 1, 5);\n    }\n    return Math.floor(Math.pow(Math.sqrt(hash), 5));\n}\n\nexport function strHashStr(str : string) : string {\n    let hash = '';\n\n    for (let i = 0; i < str.length; i++) {\n        let total = (str[i].charCodeAt(0) * i);\n\n        if (str[i + 1]) {\n            total += (str[i + 1].charCodeAt(0) * (i - 1));\n        }\n\n        hash += String.fromCharCode(97 + (Math.abs(total) % 26));\n    }\n\n    return hash;\n}\n\nexport function match(str : string, pattern : RegExp) : ?string {\n    const regmatch = str.match(pattern);\n    if (regmatch) {\n        return regmatch[1];\n    }\n}\n\nexport function awaitKey<T: mixed>(obj : Object, key : string) : ZalgoPromise<T> {\n    return new ZalgoPromise(resolve => {\n\n        let value = obj[key];\n\n        if (value) {\n            return resolve(value);\n        }\n\n        delete obj[key];\n\n        Object.defineProperty(obj, key, {\n\n            configurable: true,\n\n            set(item) {\n                value = item;\n\n                if (value) {\n                    resolve(value);\n                }\n            },\n\n            get() : T {\n                return value;\n            }\n        });\n    });\n}\n\nexport function stringifyError(err : mixed, level : number = 1) : string {\n\n    if (level >= 3) {\n        return 'stringifyError stack overflow';\n    }\n\n    try {\n        if (!err) {\n            // $FlowFixMe[method-unbinding]\n            return `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n        }\n\n        if (typeof err === 'string') {\n            return err;\n        }\n\n        if (err instanceof Error) {\n            const stack = err && err.stack;\n            const message = err && err.message;\n\n            if (stack && message) {\n                if (stack.indexOf(message) !== -1) {\n                    return stack;\n                } else {\n                    return `${ message }\\n${ stack }`;\n                }\n            } else if (stack) {\n                return stack;\n            } else if (message) {\n                return message;\n            }\n        }\n\n        if (err && err.toString && typeof err.toString === 'function') {\n            // $FlowFixMe\n            return err.toString();\n        }\n\n        // $FlowFixMe[method-unbinding]\n        return Object.prototype.toString.call(err);\n\n    } catch (newErr) {\n        return `Error while stringifying error: ${ stringifyError(newErr, level + 1) }`;\n    }\n}\n\nexport function stringifyErrorMessage(err : mixed) : string {\n\n    // $FlowFixMe[method-unbinding]\n    const defaultMessage = `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n\n    if (!err) {\n        return defaultMessage;\n    }\n\n    if (err instanceof Error) {\n        return err.message || defaultMessage;\n    }\n\n    if (typeof err.message === 'string') {\n        return err.message || defaultMessage;\n    }\n\n    return defaultMessage;\n}\n\nexport function stringify(item : mixed) : string {\n    if (typeof item === 'string') {\n        return item;\n    }\n\n    if (item && item.toString && typeof item.toString === 'function') {\n        // $FlowFixMe\n        return item.toString();\n    }\n\n    // $FlowFixMe[method-unbinding]\n    return Object.prototype.toString.call(item);\n}\n\nexport function domainMatches(hostname : string, domain : string) : boolean {\n    hostname = hostname.split('://')[1];\n    const index = hostname.indexOf(domain);\n    return (index !== -1 && hostname.slice(index) === domain);\n}\n\nexport function patchMethod(obj : Object, name : string, handler : Function) {\n    const original = obj[name];\n\n    obj[name] = function patchedMethod() : mixed {\n        return handler({\n            context:      this,\n            // $FlowFixMe[method-unbinding]\n            args:         Array.prototype.slice.call(arguments),\n            original,\n            callOriginal: () => original.apply(this, arguments)\n        });\n    };\n}\n\nexport function extend<T : Object | Function>(obj : T, source : Object) : T {\n    if (!source) {\n        return obj;\n    }\n\n    if (Object.assign) {\n        return Object.assign(obj, source);\n    }\n\n    for (const key in source) {\n        if (source.hasOwnProperty(key)) {\n            obj[key] = source[key];\n        }\n    }\n\n    return obj;\n}\n\nexport function values<T>(obj : { [string] : T }) : $ReadOnlyArray<T> {\n    if (Object.values) {\n        // $FlowFixMe\n        return Object.values(obj);\n    }\n\n    const result : Array<T> = [];\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            // $FlowFixMe[escaped-generic]\n            result.push(obj[key]);\n        }\n    }\n\n    // $FlowFixMe\n    return result;\n}\n\n// eslint-disable-next-line no-undef\nexport const memoizedValues : <T>({ [string] : T }) => $ReadOnlyArray<T> = memoize(values);\n\nexport function perc(pixels : number, percentage : number) : number {\n    return Math.round((pixels * percentage) / 100);\n}\n\nexport function min(...args : $ReadOnlyArray<number>) : number {\n    return Math.min(...args);\n}\n\nexport function max(...args : $ReadOnlyArray<number>) : number {\n    return Math.max(...args);\n}\n\nexport function roundUp(num : number, nearest : number) : number {\n    const remainder = num % nearest;\n    return remainder\n        ? (num - remainder) + nearest\n        : num;\n}\n\nexport function regexMap<T>(str : string, regexp : RegExp, handler : () => T) : $ReadOnlyArray<T> {\n    const results = [];\n\n    // $FlowFixMe\n    str.replace(regexp, function regexMapMatcher(item) {\n        results.push(handler ? handler.apply(null, arguments) : item);\n    });\n\n    // $FlowFixMe\n    return results;\n}\n\nexport function svgToBase64(svg : string) : string {\n    return `data:image/svg+xml;base64,${ base64encode(svg) }`;\n}\n\nexport function objFilter<T, R>(obj : { [string] : T }, filter? : (T, ?string) => mixed = Boolean) : { [string] : R } {\n    const result = {};\n\n    for (const key in obj) {\n        if (!obj.hasOwnProperty(key) || !filter(obj[key], key)) {\n            continue;\n        }\n\n        result[key] = obj[key];\n    }\n\n    return result;\n}\n\nexport function identity <T>(item : T) : T {\n    return item;\n}\n\nexport function regexTokenize(text : string, regexp : RegExp) : $ReadOnlyArray<string> {\n    const result = [];\n    text.replace(regexp, token => {\n        result.push(token);\n        return '';\n    });\n    return result;\n}\n\nexport function promiseDebounce<T>(method : () => ZalgoPromise<T> | T, delay : number = 50) : () => ZalgoPromise<T> {\n\n    let promise;\n    let timeout;\n\n    const promiseDebounced = function() : ZalgoPromise<T> {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        const localPromise = promise = promise || new ZalgoPromise();\n\n        timeout = setTimeout(() => {\n            promise = null;\n            timeout = null;\n\n            ZalgoPromise.try(method).then(\n                result => { localPromise.resolve(result); },\n                err => { localPromise.reject(err); }\n            );\n        }, delay);\n\n        return localPromise;\n    };\n\n    return setFunctionName(promiseDebounced, `${ getFunctionName(method) }::promiseDebounced`);\n}\n\nexport function safeInterval(method : Function, time : number) : {| cancel : () => void |} {\n\n    let timeout;\n\n    function loop() {\n        timeout = setTimeout(() => {\n            method();\n            loop();\n        }, time);\n    }\n\n    loop();\n\n    return {\n        cancel() {\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function isInteger(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+$/));\n}\n\nexport function isFloat(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+\\.[0-9]+$/));\n}\n\nexport function serializePrimitive(value : string | number | boolean) : string {\n    return value.toString();\n}\n\nexport function deserializePrimitive(value : string) : string | number | boolean {\n    if (value === 'true') {\n        return true;\n    } else if (value === 'false') {\n        return false;\n    } else if (isInteger(value)) {\n        return parseInt(value, 10);\n    } else if (isFloat(value)) {\n        return parseFloat(value);\n    } else {\n        return value;\n    }\n}\n\nexport function dotify(obj : Object, prefix : string = '', newobj : Object = {}) : { [string] : string } {\n    prefix = prefix ? `${ prefix }.` : prefix;\n    for (const key in obj) {\n        if (!obj.hasOwnProperty(key) || obj[key] === undefined || obj[key] === null || typeof obj[key] === 'function') {\n            continue;\n        } else if (obj[key] && Array.isArray(obj[key]) && obj[key].length && obj[key].every(val => typeof val !== 'object')) {\n            newobj[`${ prefix }${ key }[]`] = obj[key].join(',');\n        } else if (obj[key] && typeof obj[key] === 'object') {\n            newobj = dotify(obj[key], `${ prefix }${ key }`, newobj);\n        } else {\n            newobj[`${ prefix }${ key }`] = serializePrimitive(obj[key]);\n        }\n    }\n    return newobj;\n}\n\nexport function undotify(obj : { [string] : string }) : Object {\n\n    const result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || typeof obj[key] !== 'string') {\n            continue;\n        }\n\n        let value = obj[key];\n\n        if (key.match(/^.+\\[\\]$/)) {\n            key = key.slice(0, -2);\n            value = value.split(',').map(deserializePrimitive);\n        } else {\n            value = deserializePrimitive(value);\n        }\n\n        let keyResult = result;\n        const parts = key.split('.');\n        for (let i = 0; i < parts.length; i++) {\n            const part = parts[i];\n            const isLast = (i + 1 === parts.length);\n            const isIndex = !isLast && isInteger(parts[i + 1]);\n\n            if (part === 'constructor' || part === 'prototype' || part === '__proto__') {\n                throw new Error(`Disallowed key: ${ part }`);\n            }\n\n            if (isLast) {\n                // $FlowFixMe\n                keyResult[part] = value;\n            } else {\n                // $FlowFixMe\n                keyResult = keyResult[part] = keyResult[part] || (isIndex ? [] : {});\n            }\n        }\n    }\n\n    return result;\n}\n\nexport type EventEmitterType = {|\n    on : (eventName : string, handler : Function) => CancelableType,\n    once : (eventName : string, handler : Function) => CancelableType,\n    trigger : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    triggerOnce : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    reset : () => void\n|};\n\nexport function eventEmitter() : EventEmitterType {\n    const triggered = {};\n    let handlers = {};\n\n    const emitter = {\n\n        on(eventName : string, handler : Function) : CancelableType {\n            const handlerList = handlers[eventName] = handlers[eventName] || [];\n\n            handlerList.push(handler);\n\n            let cancelled = false;\n\n            return {\n                cancel() {\n                    if (!cancelled) {\n                        cancelled = true;\n                        handlerList.splice(handlerList.indexOf(handler), 1);\n                    }\n\n                }\n            };\n        },\n\n        once(eventName : string, handler : Function) : CancelableType {\n\n            const listener = emitter.on(eventName, () => {\n                listener.cancel();\n                handler();\n            });\n\n            return listener;\n        },\n\n        trigger(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            const handlerList = handlers[eventName];\n            const promises = [];\n\n            if (handlerList) {\n                for (const handler of handlerList) {\n                    promises.push(ZalgoPromise.try(() => handler(...args)));\n                }\n            }\n\n            return ZalgoPromise.all(promises).then(noop);\n        },\n\n        triggerOnce(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            if (triggered[eventName]) {\n                return ZalgoPromise.resolve();\n            }\n\n            triggered[eventName] = true;\n            return emitter.trigger(eventName, ...args);\n        },\n\n        reset() {\n            handlers = {};\n        }\n    };\n\n    return emitter;\n}\n\nexport function camelToDasherize(string : string) : string {\n    return string.replace(/([A-Z])/g, (g) => {\n        return `-${ g.toLowerCase() }`;\n    });\n}\n\nexport function dasherizeToCamel(string : string) : string {\n    return string.replace(/-([a-z])/g, (g) => {\n        return g[1].toUpperCase();\n    });\n}\n\nexport function capitalizeFirstLetter(string : string) : string {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\n\nexport function get(item : Object, path : string, def : mixed) : mixed {\n\n    if (!path) {\n        return def;\n    }\n\n    const pathParts = path.split('.');\n\n    // Loop through each section of our key path\n\n    for (let i = 0; i < pathParts.length; i++) {\n\n        // If we have an object, we can get the key\n        if (typeof item === 'object' && item !== null) {\n            item = item[pathParts[i]];\n\n        // Otherwise, we should return the default (undefined if not provided)\n        } else {\n            return def;\n        }\n    }\n\n    // If our final result is undefined, we should return the default\n\n    return item === undefined ? def : item;\n}\n\nexport function safeTimeout(method : Function, time : number) {\n\n    const interval = safeInterval(() => {\n        time -= 100;\n        if (time <= 0) {\n            interval.cancel();\n            method();\n        }\n    }, 100);\n}\n\nexport function defineLazyProp<T>(obj : Object | $ReadOnlyArray<mixed>, key : string | number, getter : () => T) {\n    if (Array.isArray(obj)) {\n        if (typeof key !== 'number') {\n            throw new TypeError(`Array key must be number`);\n        }\n    } else if (typeof obj === 'object' && obj !== null) {\n        if (typeof key !== 'string') {\n            throw new TypeError(`Object key must be string`);\n        }\n    }\n\n    Object.defineProperty(obj, key, {\n        configurable: true,\n        enumerable:   true,\n        get:          () => {\n            // $FlowFixMe\n            delete obj[key];\n            const value = getter();\n            // $FlowFixMe\n            obj[key] = value;\n            return value;\n        },\n        set: (value : T) => {\n            // $FlowFixMe\n            delete obj[key];\n            // $FlowFixMe\n            obj[key] = value;\n        }\n    });\n}\n\nexport function arrayFrom<T>(item : Iterable<T>) : $ReadOnlyArray<T> { // eslint-disable-line no-undef\n    // $FlowFixMe[method-unbinding]\n    return Array.prototype.slice.call(item);\n}\n\nexport function isObject(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null);\n}\n\nexport function isObjectObject(obj : mixed) : boolean {\n    // $FlowFixMe[method-unbinding]\n    return isObject(obj) && Object.prototype.toString.call(obj) === '[object Object]';\n}\n\nexport function isPlainObject(obj : mixed) : boolean {\n    if (!isObjectObject(obj)) {\n        return false;\n    }\n\n    // $FlowFixMe\n    const constructor = obj.constructor;\n\n    if (typeof constructor !== 'function') {\n        return false;\n    }\n\n    const prototype = constructor.prototype;\n\n    if (!isObjectObject(prototype)) {\n        return false;\n    }\n\n    if (!prototype.hasOwnProperty('isPrototypeOf')) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function replaceObject<T : $ReadOnlyArray<mixed> | Object> (item : T, replacer : (mixed, string | number, string) => mixed, fullKey : string = '') : T {\n\n    if (Array.isArray(item)) {\n        const length = item.length;\n        const result : Array<mixed> = [];\n\n        for (let i = 0; i < length; i++) {\n\n\n            defineLazyProp(result, i, () => {\n                const itemKey = fullKey ? `${ fullKey }.${ i }` : `${ i }`;\n                const el = item[i];\n\n                let child = replacer(el, i, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else if (isPlainObject(item)) {\n        const result = {};\n\n        for (const key in item) {\n            if (!item.hasOwnProperty(key)) {\n                continue;\n            }\n\n            defineLazyProp(result, key, () => {\n                const itemKey = fullKey ? `${ fullKey }.${ key }` : `${ key }`;\n                // $FlowFixMe\n                const el = item[key];\n\n                let child = replacer(el, key, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else {\n        throw new Error(`Pass an object or array`);\n    }\n}\n\n\nexport function copyProp(source : Object, target : Object, name : string, def : mixed) {\n    if (source.hasOwnProperty(name)) {\n        const descriptor = Object.getOwnPropertyDescriptor(source, name);\n        // $FlowFixMe\n        Object.defineProperty(target, name, descriptor);\n\n    } else {\n        target[name] = def;\n    }\n}\n\ntype RegexResultType = {|\n    text : string,\n    groups : $ReadOnlyArray<string>,\n    start : number,\n    end : number,\n    length : number,\n    replace : (text : string) => string\n|};\n\nexport function regex(pattern : string | RegExp, string : string, start : number = 0) : ?RegexResultType {\n\n    if (typeof pattern === 'string') {\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        pattern = new RegExp(pattern);\n    }\n\n    const result = string.slice(start).match(pattern);\n\n    if (!result) {\n        return;\n    }\n\n    // $FlowFixMe\n    const index : number = result.index;\n    const regmatch = result[0];\n\n    return {\n        text:   regmatch,\n        groups: result.slice(1),\n        start:  start + index,\n        end:    start + index + regmatch.length,\n        length: regmatch.length,\n\n        replace(text : string) : string {\n\n            if (!regmatch) {\n                return '';\n            }\n\n            return `${ regmatch.slice(0, start + index) }${ text }${ regmatch.slice(index + regmatch.length) }`;\n        }\n    };\n}\n\nexport function regexAll(pattern : string | RegExp, string : string) : $ReadOnlyArray<RegexResultType> {\n\n    const matches = [];\n    let start = 0;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        const regmatch = regex(pattern, string, start);\n\n        if (!regmatch) {\n            break;\n        }\n\n        matches.push(regmatch);\n        start = match.end;\n    }\n\n    return matches;\n}\n\nexport function isDefined(value : ?mixed) : boolean {\n    return value !== null && value !== undefined;\n}\n\nexport function cycle(method : Function) : ZalgoPromise<void> {\n    return ZalgoPromise.try(method).then(() => cycle(method));\n}\n\nexport function debounce<T>(method : (...args : $ReadOnlyArray<mixed>) => T, time : number = 100) : (...args : $ReadOnlyArray<mixed>) => void {\n\n    let timeout;\n\n    const debounceWrapper = function() {\n        clearTimeout(timeout);\n\n        timeout = setTimeout(() => {\n            return method.apply(this, arguments);\n        }, time);\n    };\n\n    return setFunctionName(debounceWrapper, `${ getFunctionName(method) }::debounced`);\n}\n\nexport function isRegex(item : mixed) : boolean {\n    // $FlowFixMe[method-unbinding]\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\ntype FunctionProxy<T : Function> = (method : T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport const weakMapMemoize : FunctionProxy<*> = <R : mixed>(method : (arg : any) => R) : ((...args : $ReadOnlyArray<any>) => R) => {\n\n    const weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoized(arg : any) : R {\n        return weakmap.getOrSet(arg, () => method.call(this, arg));\n    };\n};\n\ntype FunctionPromiseProxy<R : mixed, T : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<R>> = (T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport const weakMapMemoizePromise : FunctionPromiseProxy<*, *> = <R : mixed>(method : (arg : any) => ZalgoPromise<R>) : ((...args : $ReadOnlyArray<any>) => ZalgoPromise<R>) => {\n\n    const weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoizedPromise(arg : any) : ZalgoPromise<R> {\n        return weakmap.getOrSet(arg, () =>\n            method.call(this, arg).finally(() => {\n                weakmap.delete(arg);\n            }));\n    };\n};\n\nexport function getOrSet<O : Object, T : mixed>(obj : O, key : string, getter : () => T) : T {\n    if (obj.hasOwnProperty(key)) {\n        return obj[key];\n    }\n\n    const val = getter();\n    obj[key] = val;\n    return val;\n}\n\nexport type CleanupType = {|\n    set : <T : mixed>(string, T) => T, // eslint-disable-line no-undef\n    register : (Function) => {| cancel : () => void |},\n    all : (err? : mixed) => ZalgoPromise<void>\n|};\n\nexport function cleanup(obj : Object) : CleanupType {\n\n    const tasks = [];\n    let cleaned = false;\n    let cleanErr;\n\n    const cleaner = {\n        set<T : mixed>(name : string, item : T) : T {\n            if (!cleaned) {\n                obj[name] = item;\n                cleaner.register(() => {\n                    delete obj[name];\n                });\n            }\n            return item;\n        },\n\n        register(method : Function) : {| cancel : () => void |} {\n            const task = once(() => method(cleanErr));\n\n            if (cleaned) {\n                method(cleanErr);\n            } else {\n                tasks.push(task);\n            }\n\n            return {\n                cancel: () => {\n                    const index = tasks.indexOf(task);\n                    if (index !== -1) {\n                        tasks.splice(index, 1);\n                    }\n                }\n            };\n        },\n\n        all(err? : mixed) : ZalgoPromise<void> {\n            cleanErr = err;\n\n            const results = [];\n            cleaned = true;\n\n            while (tasks.length) {\n                const task = tasks.shift();\n                results.push(task());\n            }\n\n            return ZalgoPromise.all(results).then(noop);\n        }\n    };\n\n    return cleaner;\n}\n\nexport function tryCatch<T>(fn : () => T) : {| result : T, error : void |} | {| result : void, error : mixed |} {\n    let result;\n    let error;\n\n    try {\n        result = fn();\n    } catch (err) {\n        error = err;\n    }\n\n    // $FlowFixMe\n    return { result, error };\n}\n\n// eslint-disable-next-line flowtype/no-mutable-array\nexport function removeFromArray<X, T : Array<X>>(arr : T, item : X) {\n    const index = arr.indexOf(item);\n    if (index !== -1) {\n        arr.splice(index, 1);\n    }\n}\n\nexport function assertExists<T>(name : string, thing : void | null | T) : T {\n    if (thing === null || typeof thing === 'undefined') {\n        throw new Error(`Expected ${ name } to be present`);\n    }\n\n    return thing;\n}\n\nexport function unique(arr : $ReadOnlyArray<string>) : $ReadOnlyArray<string> {\n    const result = {};\n    for (const item of arr) {\n        result[item] = true;\n    }\n    return Object.keys(result);\n}\n\nexport const constHas = <X : (string | boolean | number), T : { [string] : X }>(constant : T, value : X) : boolean => {\n    return memoizedValues(constant).indexOf(value) !== -1;\n};\n\nexport function dedupeErrors<T>(handler : (mixed) => T) : (mixed) => (T | void) {\n    const seenErrors = [];\n    const seenStringifiedErrors = {};\n\n    return (err) => {\n        if (seenErrors.indexOf(err) !== -1) {\n            return;\n        }\n\n        seenErrors.push(err);\n\n        const stringifiedError = stringifyError(err);\n        if (seenStringifiedErrors[stringifiedError]) {\n            return;\n        }\n\n        seenStringifiedErrors[stringifiedError] = true;\n        return handler(err);\n    };\n}\n\nexport class ExtendableError extends Error {\n    constructor(message : string) {\n        super(message);\n        // eslint-disable-next-line unicorn/custom-error-definition\n        this.name = this.constructor.name;\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, this.constructor);\n        } else {\n            this.stack = (new Error(message)).stack;\n        }\n    }\n}\n","/* @flow */\n\nexport function hasNativeWeakMap() : boolean {\n\n    if (typeof WeakMap === 'undefined') {\n        return false;\n    }\n\n    if (typeof Object.freeze === 'undefined') {\n        return false;\n    }\n\n    try {\n\n        const testWeakMap = new WeakMap();\n        const testKey = {};\n        const testValue = '__testvalue__';\n\n        Object.freeze(testKey);\n\n        testWeakMap.set(testKey, testValue);\n\n        if (testWeakMap.get(testKey) === testValue) {\n            return true;\n        }\n\n        return false;\n\n    } catch (err) {\n\n        return false;\n    }\n}\n","/* @flow */\n/* eslint max-lines: off */\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { linkFrameWindow, isWindowClosed, assertSameDomain,\n    type SameDomainWindowType, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport { inlineMemoize, memoize, noop, stringify, capitalizeFirstLetter,\n    once, extend, safeInterval, uniqueID, arrayFrom, ExtendableError, strHashStr } from './util';\nimport { isDevice } from './device';\nimport { KEY_CODES, ATTRIBUTES, UID_HASH_LENGTH } from './constants';\nimport type { CancelableType } from './types';\n\ntype ElementRefType = string | HTMLElement;\n\nexport function getBody() : HTMLBodyElement {\n    // eslint-disable-next-line compat/compat\n    const body = document.body;\n\n    if (!body) {\n        throw new Error(`Body element not found`);\n    }\n\n    return body;\n}\n\nexport function isDocumentReady() : boolean {\n    // eslint-disable-next-line compat/compat\n    return Boolean(document.body) && (document.readyState === 'complete');\n}\n\nexport function isDocumentInteractive() : boolean {\n    // eslint-disable-next-line compat/compat\n    return Boolean(document.body) && (document.readyState === 'interactive');\n}\n\nexport function urlEncode(str : string) : string {\n    return encodeURIComponent(str);\n}\n\nexport function waitForWindowReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForWindowReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n            if (isDocumentReady()) {\n                resolve();\n            }\n\n            window.addEventListener('load', () => resolve());\n        });\n    });\n}\n\ntype WaitForDocumentReady = () => ZalgoPromise<void>;\n\nexport const waitForDocumentReady : WaitForDocumentReady = memoize(() => {\n    return new ZalgoPromise(resolve => {\n\n        if (isDocumentReady() || isDocumentInteractive()) {\n            return resolve();\n        }\n\n        const interval = setInterval(() => {\n            if (isDocumentReady() || isDocumentInteractive()) {\n                clearInterval(interval);\n                return resolve();\n            }\n        }, 10);\n    });\n});\n\nexport function waitForDocumentBody() : ZalgoPromise<HTMLBodyElement> {\n    return ZalgoPromise.try(() => {\n        if (document.body) {\n            return document.body;\n        }\n\n        return waitForDocumentReady().then(() => {\n            if (document.body) {\n                return document.body;\n            }\n\n            throw new Error('Document ready but document.body not present');\n        });\n    });\n}\n\nexport function parseQuery(queryString : string) : Object {\n    return inlineMemoize(parseQuery, () : Object => {\n        const params = {};\n\n        if (!queryString) {\n            return params;\n        }\n\n        if (queryString.indexOf('=') === -1) {\n            return params;\n        }\n\n        for (let pair of queryString.split('&')) {\n            pair = pair.split('=');\n\n            if (pair[0] && pair[1]) {\n                params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n            }\n        }\n\n        return params;\n    }, [ queryString ]);\n}\n\n\nexport function getQueryParam(name : string) : string {\n    return parseQuery(window.location.search.slice(1))[name];\n}\n\nexport function urlWillRedirectPage(url : string) : boolean {\n\n    if (url.indexOf('#') === -1) {\n        return true;\n    }\n\n    if (url.indexOf('#') === 0) {\n        return false;\n    }\n\n    if (url.split('#')[0] === window.location.href.split('#')[0]) {\n        return false;\n    }\n\n    return true;\n}\n\nexport type Query = {\n    [ string ] : boolean | string\n};\n\nexport function formatQuery(obj : Query = {}) : string {\n\n    return Object.keys(obj).filter(key => {\n        return typeof obj[key] === 'string' || typeof obj[key] === 'boolean';\n    }).map(key => {\n        const val = obj[key];\n\n        if (typeof val !== 'string' && typeof val !== 'boolean') {\n            throw new TypeError(`Invalid type for query`);\n        }\n\n        return `${ urlEncode(key) }=${ urlEncode(val.toString()) }`;\n    }).join('&');\n}\n\nexport function extendQuery(originalQuery : string, props : Query = {}) : string {\n\n    if (!props || !Object.keys(props).length) {\n        return originalQuery;\n    }\n\n    return formatQuery({\n        ...parseQuery(originalQuery),\n        ...props\n    });\n}\n\nexport function extendUrl(url : string, options : {| query? : Query, hash? : Query |}) : string {\n\n    const query = options.query || {};\n    const hash = options.hash || {};\n\n    let originalUrl;\n    let originalQuery;\n    let originalHash;\n\n    [ originalUrl, originalHash ] = url.split('#');\n    [ originalUrl, originalQuery ] = originalUrl.split('?');\n\n    const queryString = extendQuery(originalQuery, query);\n    const hashString = extendQuery(originalHash, hash);\n\n    if (queryString) {\n        originalUrl = `${ originalUrl }?${ queryString }`;\n    }\n\n    if (hashString) {\n        originalUrl = `${ originalUrl }#${ hashString }`;\n    }\n\n    return originalUrl;\n}\n\nexport function redirect(url : string, win : CrossDomainWindowType = window) : ZalgoPromise<void> {\n    return new ZalgoPromise(resolve => {\n        win.location = url;\n        if (!urlWillRedirectPage(url)) {\n            resolve();\n        }\n    });\n}\n\nexport function hasMetaViewPort() : boolean {\n    const meta = document.querySelector('meta[name=viewport]');\n\n    if (isDevice() && window.screen.width < 660 && !meta) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function isElementVisible(el : HTMLElement) : boolean {\n    return Boolean(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n}\n\nexport function getPerformance() : ?Performance {\n    return inlineMemoize(getPerformance, () : ?Performance => {\n        const performance = window.performance;\n\n        if (\n            performance &&\n            performance.now &&\n            performance.timing &&\n            performance.timing.connectEnd &&\n            performance.timing.navigationStart &&\n            (Math.abs(performance.now() - Date.now()) > 1000) &&\n            (performance.now() - (performance.timing.connectEnd - performance.timing.navigationStart)) > 0\n        ) {\n            return performance;\n        }\n    });\n}\n\nexport function enablePerformance() : boolean {\n    return Boolean(getPerformance());\n}\n\nexport function getPageRenderTime() : ZalgoPromise<?number> {\n    return waitForDocumentReady().then(() => {\n        const performance = getPerformance();\n\n        if (!performance) {\n            return;\n        }\n\n        const timing = performance.timing;\n\n        if (timing.connectEnd && timing.domInteractive) {\n            return timing.domInteractive - timing.connectEnd;\n        }\n    });\n}\n\nexport function htmlEncode(html : string = '') : string {\n    return html.toString()\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;')\n        .replace(/\\//g, '&#x2F;');\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined') && window.location !== undefined;\n}\n\nexport function querySelectorAll(selector : string, doc : HTMLElement = window.document) : $ReadOnlyArray<HTMLElement> {\n    // $FlowFixMe[method-unbinding]\n    return Array.prototype.slice.call(doc.querySelectorAll(selector));\n}\n\nexport function onClick(element : HTMLElement, handler : (Event) => void) {\n    element.addEventListener('touchstart', noop);\n    element.addEventListener('click', handler);\n    element.addEventListener('keypress', (event : Event) => {\n        // $FlowFixMe\n        if (event.keyCode === KEY_CODES.ENTER || event.keyCode === KEY_CODES.SPACE) {\n            return handler(event);\n        }\n    });\n}\n\nexport function getScript({ host = window.location.host, path, reverse = false } : {| host? : string, path : string, reverse? : boolean |}) : ?HTMLScriptElement {\n    return inlineMemoize(getScript, () : ?HTMLScriptElement => {\n\n        const url = `${ host }${ path }`;\n        // $FlowFixMe[method-unbinding]\n        const scripts = Array.prototype.slice.call(document.getElementsByTagName('script'));\n\n        if (reverse) {\n            scripts.reverse();\n        }\n\n        for (const script of scripts) {\n            if (!script.src) {\n                continue;\n            }\n\n            const src = script.src.replace(/^https?:\\/\\//, '').split('?')[0];\n\n            if (src === url) {\n                return script;\n            }\n        }\n    }, [ path ]);\n}\n\nexport function isLocalStorageEnabled() : boolean {\n    return inlineMemoize(isLocalStorageEnabled, () => {\n        try {\n            if (typeof window === 'undefined') {\n                return false;\n            }\n\n            if (window.localStorage) {\n                const value = Math.random().toString();\n                window.localStorage.setItem('__test__localStorage__', value);\n                const result = window.localStorage.getItem('__test__localStorage__');\n                window.localStorage.removeItem('__test__localStorage__');\n                if (value === result) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            // pass\n        }\n        return false;\n    });\n}\n\nexport function getBrowserLocales() : $ReadOnlyArray<{| country? : string, lang : string |}> {\n    const nav = window.navigator;\n\n    const locales = nav.languages\n        ? [ ...nav.languages ]\n        : [];\n\n    if (nav.language) {\n        locales.push(nav.language);\n    }\n\n    if (nav.userLanguage) {\n        locales.push(nav.userLanguage);\n    }\n\n    return locales.map(locale => {\n\n        if (locale && locale.match(/^[a-z]{2}[-_][A-Z]{2}$/)) {\n            const [ lang, country ] = locale.split(/[-_]/);\n            return { country, lang };\n        }\n\n        if (locale && locale.match(/^[a-z]{2}$/)) {\n            return { lang: locale };\n        }\n\n        return null;\n\n    }).filter(Boolean);\n}\n\n\nexport function appendChild(container : HTMLElement, child : HTMLElement | Text) {\n    container.appendChild(child);\n}\n\nexport function isElement(element : mixed) : boolean {\n\n    if (element instanceof window.Element) {\n        return true;\n    }\n\n    if (element !== null && typeof element === 'object' && element.nodeType === 1 && typeof element.style === 'object' && typeof element.ownerDocument === 'object') {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getElementSafe(id : ElementRefType, doc : Document | HTMLElement = document) : ?HTMLElement {\n\n    if (isElement(id)) {\n        // $FlowFixMe\n        return id;\n    }\n\n    if (typeof id === 'string') {\n        return doc.querySelector(id);\n    }\n}\n\nexport function getElement(id : ElementRefType, doc : Document | HTMLElement = document) : HTMLElement {\n\n    const element = getElementSafe(id, doc);\n\n    if (element) {\n        return element;\n    }\n\n    throw new Error(`Can not find element: ${ stringify(id) }`);\n}\n\nexport function elementReady(id : ElementRefType) : ZalgoPromise<HTMLElement> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        const name = stringify(id);\n        let el = getElementSafe(id);\n\n        if (el) {\n            return resolve(el);\n        }\n\n        if (isDocumentReady()) {\n            return reject(new Error(`Document is ready and element ${ name } does not exist`));\n        }\n\n        const interval = setInterval(() => {\n\n            el = getElementSafe(id);\n\n            if (el) {\n                resolve(el);\n                clearInterval(interval);\n                return;\n            }\n\n            if (isDocumentReady()) {\n                clearInterval(interval);\n                return reject(new Error(`Document is ready and element ${ name } does not exist`));\n            }\n        }, 10);\n    });\n}\n\n// eslint-disable-next-line unicorn/custom-error-definition\nexport class PopupOpenError extends ExtendableError {}\n\ntype PopupOptions = {|\n    name? : string,\n    width? : number,\n    height? : number,\n    top? : number,\n    left? : number,\n    status? : 0 | 1,\n    resizable? : 0 | 1,\n    toolbar? : 0 | 1,\n    menubar? : 0 | 1,\n    scrollbars? : 0 | 1,\n    closeOnUnload? : 0 | 1\n|};\n\nexport function popup(url : string, options? : PopupOptions) : CrossDomainWindowType {\n\n    // $FlowFixMe\n    options = options || {};\n\n    const { closeOnUnload = 1, name = '', width, height } = options;\n\n    let top = 0;\n    let left = 0;\n\n    if (width) {\n        if (window.outerWidth) {\n            left = Math.round((window.outerWidth - width) / 2) + window.screenX;\n        } else if (window.screen.width) {\n            left = Math.round((window.screen.width - width) / 2);\n        }\n    }\n\n    if (height) {\n        if (window.outerHeight) {\n            top = Math.round((window.outerHeight - height) / 2) + window.screenY;\n        } else if (window.screen.height) {\n            top = Math.round((window.screen.height - height) / 2);\n        }\n    }\n\n    delete options.closeOnUnload;\n    delete options.name;\n\n    if (width && height) {\n        // $FlowFixMe\n        options = {\n            top,\n            left,\n            width,\n            height,\n            status:     1,\n            toolbar:    0,\n            menubar:    0,\n            resizable:  1,\n            scrollbars: 1,\n            ...options\n        };\n    }\n\n    // eslint-disable-next-line array-callback-return\n    const params = Object.keys(options).map(key => {\n        // $FlowFixMe\n        if (options[key] !== null && options[key] !== undefined) {\n            return `${ key }=${ stringify(options[key]) }`;\n        }\n    }).filter(Boolean).join(',');\n\n    let win;\n\n    try {\n        win = window.open(url, name, params);\n    } catch (err) {\n        throw new PopupOpenError(`Can not open popup window - ${ err.stack || err.message }`);\n    }\n\n    if (isWindowClosed(win)) {\n        const err = new PopupOpenError(`Can not open popup window - blocked`);\n        throw err;\n    }\n\n    if (closeOnUnload) {\n        window.addEventListener('unload', () => win.close());\n    }\n\n    return win;\n}\n\n\nexport function writeToWindow(win : SameDomainWindowType, html : string) {\n    try {\n        win.document.open();\n        win.document.write(html);\n        win.document.close();\n    } catch (err) {\n        try {\n            win.location = `javascript: document.open(); document.write(${ JSON.stringify(html) }); document.close();`;\n        } catch (err2) {\n            // pass\n        }\n    }\n}\n\nexport function writeElementToWindow(win : SameDomainWindowType, el : HTMLElement) {\n\n    const tag = el.tagName.toLowerCase();\n\n    if (tag !== 'html') {\n        throw new Error(`Expected element to be html, got ${ tag }`);\n    }\n\n    const documentElement = win.document.documentElement;\n\n    for (const child of arrayFrom(documentElement.children)) {\n        documentElement.removeChild(child);\n    }\n\n    for (const child of arrayFrom(el.children)) {\n        documentElement.appendChild(child);\n    }\n}\n\nexport function setStyle(el : HTMLElement, styleText : string, doc : Document = window.document) {\n    // $FlowFixMe\n    if (el.styleSheet) {\n        // $FlowFixMe\n        el.styleSheet.cssText = styleText;\n    } else {\n        el.appendChild(doc.createTextNode(styleText));\n    }\n}\n\nexport type ElementOptionsType = {|\n    style? : { [ string ] : string },\n    id? : string,\n    class? : ?$ReadOnlyArray<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string\n|};\n\nlet awaitFrameLoadPromises : WeakMap<HTMLIFrameElement, ZalgoPromise<HTMLIFrameElement>>;\n\nexport function awaitFrameLoad(frame : HTMLIFrameElement) : ZalgoPromise<HTMLIFrameElement> {\n    awaitFrameLoadPromises = awaitFrameLoadPromises || new WeakMap();\n\n    if (awaitFrameLoadPromises.has(frame)) {\n        const promise = awaitFrameLoadPromises.get(frame);\n        if (promise) {\n            return promise;\n        }\n    }\n\n    const promise = new ZalgoPromise((resolve, reject) => {\n        frame.addEventListener('load', () => {\n            linkFrameWindow(frame);\n            resolve(frame);\n        });\n\n        frame.addEventListener('error', (err : Event) => {\n            if (frame.contentWindow) {\n                resolve(frame);\n            } else {\n                reject(err);\n            }\n        });\n    });\n\n    awaitFrameLoadPromises.set(frame, promise);\n\n    return promise;\n}\n\nexport function awaitFrameWindow(frame : HTMLIFrameElement) : ZalgoPromise<CrossDomainWindowType> {\n    return awaitFrameLoad(frame).then(loadedFrame => {\n\n        if (!loadedFrame.contentWindow) {\n            throw new Error(`Could not find window in iframe`);\n        }\n\n        return loadedFrame.contentWindow;\n    });\n}\n\nconst getDefaultCreateElementOptions = () : ElementOptionsType => {\n    // $FlowFixMe\n    return {};\n};\n\nexport function createElement(tag : string = 'div', options : ElementOptionsType = getDefaultCreateElementOptions(), container : ?HTMLElement) : HTMLElement {\n\n    tag = tag.toLowerCase();\n    const element = document.createElement(tag);\n\n    if (options.style) {\n        extend(element.style, options.style);\n    }\n\n    if (options.class) {\n        element.className = options.class.join(' ');\n    }\n\n    if (options.id) {\n        element.setAttribute('id', options.id);\n    }\n\n    if (options.attributes) {\n        for (const key of Object.keys(options.attributes)) {\n            element.setAttribute(key, options.attributes[key]);\n        }\n    }\n\n    if (options.styleSheet) {\n        setStyle(element, options.styleSheet);\n    }\n\n    if (container) {\n        appendChild(container, element);\n    }\n\n    if (options.html) {\n        if (tag === 'iframe') {\n            // $FlowFixMe\n            if (!container || !element.contentWindow) {\n                throw new Error(`Iframe html can not be written unless container provided and iframe in DOM`);\n            }\n\n            // $FlowFixMe\n            writeToWindow(element.contentWindow, options.html);\n\n        } else {\n            element.innerHTML = options.html;\n        }\n    }\n\n    return element;\n}\n\ntype StringMap = {|\n    [ string ] : string\n|};\n\nexport type IframeElementOptionsType = {|\n    style? : StringMap,\n    class? : ?$ReadOnlyArray<string>,\n    attributes? : StringMap,\n    styleSheet? : ?string,\n    html? : ?string,\n    url? : ?string\n|};\n\nconst getDefaultIframeOptions = () : IframeElementOptionsType => {\n    // $FlowFixMe\n    return {};\n};\n\nconst getDefaultStringMap = () : StringMap => {\n    // $FlowFixMe\n    return {};\n};\n\nexport function iframe(options : IframeElementOptionsType = getDefaultIframeOptions(), container : ?HTMLElement) : HTMLIFrameElement {\n\n    const attributes = options.attributes || getDefaultStringMap();\n    const style = options.style || getDefaultStringMap();\n\n    // $FlowFixMe\n    const newAttributes = {\n        allowTransparency: 'true',\n        ...attributes\n    };\n\n    // $FlowFixMe\n    const newStyle = {\n        backgroundColor: 'transparent',\n        border:          'none',\n        ...style\n    };\n\n    const frame = createElement('iframe', {\n        attributes: newAttributes,\n        style:      newStyle,\n        html:       options.html,\n        class:      options.class\n    });\n\n    const isIE = window.navigator.userAgent.match(/MSIE|Edge/i);\n\n    if (!frame.hasAttribute('id')) {\n        frame.setAttribute('id', uniqueID());\n    }\n\n    // $FlowFixMe\n    awaitFrameLoad(frame);\n\n    if (container) {\n        const el = getElement(container);\n        el.appendChild(frame);\n    }\n\n    if (options.url || isIE) {\n        frame.setAttribute('src', options.url || 'about:blank');\n    }\n\n    // $FlowFixMe\n    return frame;\n}\n\nexport function addEventListener(obj : HTMLElement, event : string, handler : (event : Event) => void) : CancelableType {\n    obj.addEventListener(event, handler);\n    return {\n        cancel() {\n            obj.removeEventListener(event, handler);\n        }\n    };\n}\n\nexport function bindEvents(element : HTMLElement, eventNames : $ReadOnlyArray<string>, handler : (event : Event) => void) : CancelableType {\n\n    handler = once(handler);\n\n    for (const eventName of eventNames) {\n        element.addEventListener(eventName, handler);\n    }\n\n    return {\n        cancel: once(() => {\n            for (const eventName of eventNames) {\n                element.removeEventListener(eventName, handler);\n            }\n        })\n    };\n}\n\nconst VENDOR_PREFIXES = [ 'webkit', 'moz', 'ms', 'o' ];\n\nexport function setVendorCSS(element : HTMLElement, name : string, value : string) {\n\n    // $FlowFixMe\n    element.style[name] = value;\n\n    const capitalizedName = capitalizeFirstLetter(name);\n\n    for (const prefix of VENDOR_PREFIXES) {\n        // $FlowFixMe\n        element.style[`${ prefix }${ capitalizedName }`] = value;\n    }\n}\n\nconst ANIMATION_START_EVENTS = [ 'animationstart', 'webkitAnimationStart', 'oAnimationStart', 'MSAnimationStart' ];\nconst ANIMATION_END_EVENTS   = [ 'animationend', 'webkitAnimationEnd', 'oAnimationEnd', 'MSAnimationEnd' ];\n\nexport function animate(element : ElementRefType, name : string, clean : (Function) => void, timeout : number = 1000) : ZalgoPromise<void> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        const el = getElement(element);\n\n        if (!el) {\n            return resolve();\n        }\n\n        let hasStarted = false;\n\n        // eslint-disable-next-line prefer-const\n        let startTimeout;\n        let endTimeout;\n        // eslint-disable-next-line prefer-const\n        let startEvent;\n        // eslint-disable-next-line prefer-const\n        let endEvent;\n\n        function cleanUp() {\n            clearTimeout(startTimeout);\n            clearTimeout(endTimeout);\n            startEvent.cancel();\n            endEvent.cancel();\n        }\n\n        startEvent = bindEvents(el, ANIMATION_START_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            clearTimeout(startTimeout);\n\n            event.stopPropagation();\n\n            startEvent.cancel();\n            hasStarted = true;\n\n            endTimeout = setTimeout(() => {\n                cleanUp();\n                resolve();\n            }, timeout);\n        });\n\n        endEvent = bindEvents(el, ANIMATION_END_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            cleanUp();\n\n            // $FlowFixMe\n            if (typeof event.animationName === 'string' && event.animationName !== name) {\n                return reject(`Expected animation name to be ${ name }, found ${ event.animationName }`);\n            }\n\n            return resolve();\n        });\n\n        setVendorCSS(el, 'animationName', name);\n\n        startTimeout = setTimeout(() => {\n            if (!hasStarted) {\n                cleanUp();\n                return resolve();\n            }\n        }, 200);\n\n        if (clean) {\n            clean(cleanUp);\n        }\n    });\n}\n\nexport function makeElementVisible(element : HTMLElement) {\n    element.style.setProperty('visibility', '');\n}\n\nexport function makeElementInvisible(element : HTMLElement) {\n    element.style.setProperty('visibility', 'hidden', 'important');\n}\n\n\nexport function showElement(element : HTMLElement) {\n    element.style.setProperty('display', '');\n}\n\nexport function hideElement(element : HTMLElement) {\n    element.style.setProperty('display', 'none', 'important');\n}\n\nexport function destroyElement(element : HTMLElement) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n\nexport function showAndAnimate(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    const animation = animate(element, name, clean);\n    showElement(element);\n    return animation;\n}\n\nexport function animateAndHide(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    return animate(element, name, clean).then(() => {\n        hideElement(element);\n    });\n}\n\nexport function addClass(element : HTMLElement, name : string) {\n    element.classList.add(name);\n}\n\nexport function removeClass(element : HTMLElement, name : string) {\n    element.classList.remove(name);\n}\n\nexport function isElementClosed(el : HTMLElement) : boolean {\n    if (!el || !el.parentNode || !el.ownerDocument || !el.ownerDocument.documentElement || !el.ownerDocument.documentElement.contains(el)) {\n        return true;\n    }\n    return false;\n}\n\nexport function watchElementForClose(element : HTMLElement, handler : () => mixed) : CancelableType {\n    handler = once(handler);\n\n    let cancelled = false;\n    const mutationObservers = [];\n    // eslint-disable-next-line prefer-const\n    let interval;\n    // eslint-disable-next-line prefer-const\n    let sacrificialFrame;\n    let sacrificialFrameWin;\n\n    const cancel = () => {\n        cancelled = true;\n        for (const observer of mutationObservers) {\n            observer.disconnect();\n        }\n        if (interval) {\n            interval.cancel();\n        }\n        if (sacrificialFrameWin) {\n            // eslint-disable-next-line no-use-before-define\n            sacrificialFrameWin.removeEventListener('unload', elementClosed);\n        }\n        if (sacrificialFrame) {\n            destroyElement(sacrificialFrame);\n        }\n    };\n\n    const elementClosed = () => {\n        if (!cancelled) {\n            handler();\n            cancel();\n        }\n    };\n\n    if (isElementClosed(element)) {\n        elementClosed();\n        return { cancel };\n    }\n\n    // Strategy 1: Mutation observer\n\n    if (window.MutationObserver) {\n        let mutationElement = element.parentElement;\n        while (mutationElement) {\n            const mutationObserver = new window.MutationObserver(() => {\n                if (isElementClosed(element)) {\n                    elementClosed();\n                }\n            });\n\n            mutationObserver.observe(mutationElement, { childList: true });\n            mutationObservers.push(mutationObserver);\n            mutationElement = mutationElement.parentElement;\n        }\n    }\n\n    // Strategy 2: Sacrificial iframe\n\n    sacrificialFrame = document.createElement('iframe');\n    sacrificialFrame.setAttribute('name', `__detect_close_${ uniqueID() }__`);\n    sacrificialFrame.style.display = 'none';\n    awaitFrameWindow(sacrificialFrame).then(frameWin => {\n        sacrificialFrameWin = assertSameDomain(frameWin);\n        sacrificialFrameWin.addEventListener('unload', elementClosed);\n    });\n    element.appendChild(sacrificialFrame);\n\n    // Strategy 3: Poller\n\n    const check = () => {\n        if (isElementClosed(element)) {\n            elementClosed();\n        }\n    };\n    interval = safeInterval(check, 1000);\n\n    return { cancel };\n}\n\nexport function fixScripts(el : HTMLElement, doc : Document = window.document) {\n    for (const script of querySelectorAll('script', el)) {\n        const parentNode = script.parentNode;\n\n        if (!parentNode) {\n            continue;\n        }\n\n        const newScript = doc.createElement('script');\n        newScript.text = script.textContent;\n        parentNode.replaceChild(newScript, script);\n    }\n}\n\ntype OnResizeOptions = {|\n    width? : boolean,\n    height? : boolean,\n    interval? : number,\n    win? : SameDomainWindowType\n|};\n\nexport function onResize(el : HTMLElement, handler : ({| width : number, height : number |}) => void, { width = true, height = true, interval = 100, win = window } : OnResizeOptions = {}) : {| cancel : () => void |} {\n    let currentWidth = el.offsetWidth;\n    let currentHeight = el.offsetHeight;\n    let canceled = false;\n\n    handler({ width: currentWidth, height: currentHeight });\n\n    const check = () => {\n        if (canceled || !isElementVisible(el)) {\n            return;\n        }\n\n        const newWidth = el.offsetWidth;\n        const newHeight = el.offsetHeight;\n\n        if ((width && newWidth !== currentWidth) || (height && newHeight !== currentHeight)) {\n            handler({ width: newWidth, height: newHeight });\n        }\n\n        currentWidth = newWidth;\n        currentHeight = newHeight;\n    };\n\n    let observer;\n    let timeout;\n\n    win.addEventListener('resize', check);\n\n    if (typeof win.ResizeObserver !== 'undefined') {\n        observer = new win.ResizeObserver(check);\n        observer.observe(el);\n        timeout = safeInterval(check, interval * 10);\n\n    } else if (typeof win.MutationObserver !== 'undefined') {\n        observer = new win.MutationObserver(check);\n        observer.observe(el, {\n            attributes:    true,\n            childList:     true,\n            subtree:       true,\n            characterData: false\n        });\n        timeout = safeInterval(check, interval * 10);\n    } else {\n        timeout = safeInterval(check, interval);\n    }\n\n    return {\n        cancel: () => {\n            canceled = true;\n            observer.disconnect();\n            window.removeEventListener('resize', check);\n            timeout.cancel();\n        }\n    };\n}\n\nexport function getResourceLoadTime(url : string) : ?number {\n    const performance = getPerformance();\n\n    if (!performance) {\n        return;\n    }\n\n    // $FlowFixMe[method-unbinding]\n    if (typeof performance.getEntries !== 'function') {\n        return;\n    }\n\n    const entries = performance.getEntries();\n\n    for (let i = 0; i < entries.length; i++) {\n        const entry = entries[i];\n\n        if (entry && entry.name && entry.name.indexOf(url) === 0 && typeof entry.duration === 'number') {\n            return Math.floor(entry.duration);\n        }\n    }\n}\n\nexport function isShadowElement(element : Node) : boolean {\n    while (element.parentNode) {\n        element = element.parentNode;\n    }\n\n    return element.toString() === '[object ShadowRoot]';\n}\n\nexport function getShadowRoot(element : Node) : ?Node {\n    while (element.parentNode) {\n        element = element.parentNode;\n    }\n\n    if (isShadowElement(element)) {\n        return element;\n    }\n}\n\nexport function getShadowHost(element : Node) : ?HTMLElement {\n    const shadowRoot = getShadowRoot(element);\n\n    // $FlowFixMe\n    if (shadowRoot && shadowRoot.host) {\n        // $FlowFixMe\n        return shadowRoot.host;\n    }\n}\n\n\nexport function insertShadowSlot(element : HTMLElement) : HTMLElement {\n    const shadowHost = getShadowHost(element);\n\n    if (!shadowHost) {\n        throw new Error(`Element is not in shadow dom`);\n    }\n\n    const slotName = `shadow-slot-${ uniqueID() }`;\n    const slot = document.createElement('slot');\n    slot.setAttribute('name', slotName);\n    element.appendChild(slot);\n\n    const slotProvider = document.createElement('div');\n    slotProvider.setAttribute('slot', slotName);\n    shadowHost.appendChild(slotProvider);\n\n    if (isShadowElement(shadowHost)) {\n        return insertShadowSlot(slotProvider);\n    }\n\n    return slotProvider;\n}\n\nexport function preventClickFocus(el : HTMLElement) {\n    const onFocus = (event : Event) => {\n        el.removeEventListener('focus', onFocus);\n        event.preventDefault();\n        el.blur();\n        return false;\n    };\n\n    el.addEventListener('mousedown', () => {\n        el.addEventListener('focus', onFocus);\n        setTimeout(() => {\n            el.removeEventListener('focus', onFocus);\n        }, 1);\n    });\n}\n\nexport function getStackTrace() : string {\n    try {\n        throw new Error('_');\n    }\n    catch (err) {\n        return err.stack || '';\n    }\n}\n\nfunction inferCurrentScript() : ?HTMLScriptElement {\n    try {\n        const stack = getStackTrace();\n        const stackDetails = (/.*at [^(]*\\((.*):(.+):(.+)\\)$/ig).exec(stack);\n        const scriptLocation = stackDetails && stackDetails[1];\n\n        if (!scriptLocation) {\n            return;\n        }\n\n        // $FlowFixMe[method-unbinding]\n        for (const script of Array.prototype.slice.call(document.getElementsByTagName('script')).reverse()) {\n            if (script.src && script.src === scriptLocation) {\n                return script;\n            }\n        }\n\n    } catch (err) {\n        // pass\n    }\n}\n\n// eslint-disable-next-line compat/compat\nlet currentScript = typeof document !== 'undefined' ? document.currentScript : null;\n\ntype GetCurrentScript = () => HTMLScriptElement;\n\nexport const getCurrentScript : GetCurrentScript = memoize(() => {\n    if (currentScript) {\n        return currentScript;\n    }\n\n    currentScript = inferCurrentScript();\n\n    if (currentScript) {\n        return currentScript;\n    }\n\n    throw new Error('Can not determine current script');\n});\n\nconst currentUID = uniqueID();\n\ntype GetCurrentScriptUID = () => string;\n\nexport const getCurrentScriptUID : GetCurrentScriptUID = memoize(() => {\n    let script;\n\n    try {\n        script = getCurrentScript();\n    } catch (err) {\n        return currentUID;\n    }\n\n    let uid = script.getAttribute(ATTRIBUTES.UID);\n\n    if (uid && typeof uid === 'string') {\n        return uid;\n    }\n\n    uid = script.getAttribute(`${ ATTRIBUTES.UID }-auto`);\n\n    if (uid && typeof uid === 'string') {\n        return uid;\n    }\n\n    if (script.src) {\n\n        const { src, dataset } = script;\n        const stringToHash = JSON.stringify({ src, dataset });\n        const hashedString = strHashStr(stringToHash);\n        const hashResult = hashedString.slice(hashedString.length - UID_HASH_LENGTH);\n\n        uid = `uid_${ hashResult }`;\n    } else {\n        uid = uniqueID();\n    }\n\n    script.setAttribute(`${ ATTRIBUTES.UID }-auto`, uid);\n\n    return uid;\n});\n\ntype SubmitFormOptions = {|\n    url : string,\n    target : string,\n    body? : {| [string] : string | boolean |},\n    method? : string\n|};\n\nexport function submitForm({ url, target, body, method = 'post' } : SubmitFormOptions) {\n    const form = document.createElement('form');\n    form.setAttribute('target', target);\n    form.setAttribute('method', method);\n    form.setAttribute('action', url);\n    form.style.display = 'none';\n\n    if (body) {\n        for (const key of Object.keys(body)) {\n            const input = document.createElement('input');\n            input.setAttribute('name', key);\n            input.setAttribute('value', body[key]?.toString());\n            form.appendChild(input);\n        }\n    }\n\n    getBody().appendChild(form);\n    form.submit();\n    getBody().removeChild(form);\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, type SameDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\nimport { getOrSet, getCurrentScriptUID } from 'belter/src';\n\nexport function getGlobalKey() : string {\n    if (__POST_ROBOT__.__SCRIPT_NAMESPACE__) {\n        return `${ __POST_ROBOT__.__GLOBAL_KEY__ }_${ getCurrentScriptUID() }`;\n    } else {\n        return __POST_ROBOT__.__GLOBAL_KEY__;\n    }\n}\n\nexport function getGlobal(win : SameDomainWindowType = window) : Object {\n    const globalKey = getGlobalKey();\n\n    if (win !== window) {\n        return win[globalKey];\n    }\n    const global : Object = win[globalKey] = win[globalKey] || {};\n    return global;\n}\n\nexport function deleteGlobal() {\n    const globalKey = getGlobalKey();\n    delete window[globalKey];\n}\n\ntype ObjectGetter = () => Object;\nconst getObj : ObjectGetter = () => ({});\n\ntype GetOrSet<T> = ((string, () => T) => T) & ((string, () => void) => void);\n\ntype GlobalStore<T> = {|\n    get : ((string, T) => T) & ((string, void) => T | void),\n    set : (string, T) => T,\n    has : (string) => boolean,\n    del : (string) => void,\n    getOrSet : GetOrSet<T>,\n    reset : () => void,\n    keys : () => $ReadOnlyArray<string>\n|};\n\nexport function globalStore<T : mixed>(key? : string = 'store', defStore? : ObjectGetter = getObj) : GlobalStore<T> {\n    return getOrSet(getGlobal(), key, () => {\n        let store = defStore();\n\n        return {\n            has: (storeKey) => {\n                return store.hasOwnProperty(storeKey);\n            },\n            get: (storeKey, defVal) => {\n                // $FlowFixMe\n                return store.hasOwnProperty(storeKey) ? store[storeKey] : defVal;\n            },\n            set: (storeKey, val) => {\n                store[storeKey] = val;\n                return val;\n            },\n            del: (storeKey) => {\n                delete store[storeKey];\n            },\n            getOrSet: (storeKey, getter) => {\n                // $FlowFixMe\n                return getOrSet(store, storeKey, getter);\n            },\n            reset: () => {\n                store = defStore();\n            },\n            keys: () => {\n                return Object.keys(store);\n            }\n        };\n    });\n}\n\nexport class WildCard {}\n\nexport function getWildcard() : WildCard {\n    const global = getGlobal();\n    global.WINDOW_WILDCARD = global.WINDOW_WILDCARD || new WildCard();\n    return global.WINDOW_WILDCARD;\n}\n\ntype WindowStore<T> = {|\n    get : ((CrossDomainWindowType | WildCard, T) => T) & ((CrossDomainWindowType | WildCard, void) => T | void),\n    set : (CrossDomainWindowType | WildCard, T) => T,\n    has : (CrossDomainWindowType | WildCard) => boolean,\n    del : (CrossDomainWindowType | WildCard) => void,\n    getOrSet : (CrossDomainWindowType | WildCard, () => T) => T\n|};\n\nexport function windowStore<T>(key? : string = 'store', defStore? : ObjectGetter = getObj) : WindowStore<T> {\n    return globalStore('windowStore').getOrSet(key, () => {\n        const winStore = new WeakMap();\n\n        const getStore = (win : CrossDomainWindowType | WildCard) : ObjectGetter => {\n            return winStore.getOrSet(win, defStore);\n        };\n    \n        return {\n            has: (win) => {\n                const store = getStore(win);\n                return store.hasOwnProperty(key);\n            },\n            get: (win, defVal) => {\n                const store = getStore(win);\n                // $FlowFixMe\n                return store.hasOwnProperty(key) ? store[key] : defVal;\n            },\n            set: (win, val) => {\n                const store = getStore(win);\n                store[key] = val;\n                return val;\n            },\n            del: (win) => {\n                const store = getStore(win);\n                delete store[key];\n            },\n            getOrSet: (win, getter) => {\n                const store = getStore(win);\n                return getOrSet(store, key, getter);\n            }\n        };\n    });\n}\n","/* @flow */\n\nexport const KEY_CODES = {\n    ENTER: 13,\n    SPACE: 32\n};\n\nexport const ATTRIBUTES = {\n    UID: 'data-uid'\n};\n\nexport const UID_HASH_LENGTH = 30;\n","/* @flow */\n\nimport { getAncestor, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { windowStore, globalStore, getGlobal } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nfunction getInstanceID() : string {\n    return globalStore('instance').getOrSet('instanceID', uniqueID);\n}\n\nfunction getHelloPromise(win : CrossDomainWindowType) : ZalgoPromise<{| domain : string |}> {\n    const helloPromises = windowStore('helloPromises');\n    return helloPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nfunction resolveHelloPromise(win : CrossDomainWindowType, { domain }) : ZalgoPromise<{| domain : string |}> {\n    const helloPromises = windowStore('helloPromises');\n    const existingPromise = helloPromises.get(win);\n    if (existingPromise) {\n        existingPromise.resolve({ domain });\n    }\n    const newPromise = ZalgoPromise.resolve({ domain });\n    helloPromises.set(win, newPromise);\n    return newPromise;\n}\n\nfunction listenForHello({ on } : {| on : OnType |}) : CancelableType {\n    return on(MESSAGE_NAME.HELLO, { domain: WILDCARD }, ({ source, origin }) => {\n        resolveHelloPromise(source, { domain: origin });\n        return { instanceID: getInstanceID() };\n    });\n}\n\nexport function sayHello(win : CrossDomainWindowType, { send } : {| send : SendType |}) : ZalgoPromise<{| win : CrossDomainWindowType, domain : string, instanceID : string |}> {\n    return send(win, MESSAGE_NAME.HELLO, { instanceID: getInstanceID() }, { domain: WILDCARD, timeout: -1 })\n        .then(({ origin, data: { instanceID } }) => {\n            resolveHelloPromise(win, { domain: origin });\n            return { win, domain: origin, instanceID };\n        });\n}\n\nexport function getWindowInstanceID(win : CrossDomainWindowType, { send } : {| send : SendType |}) : ZalgoPromise<string> {\n    return windowStore('windowInstanceIDPromises').getOrSet(win, () => {\n        return sayHello(win, { send }).then(({ instanceID }) => instanceID);\n    });\n}\n\nexport function initHello({ on, send } : {| on : OnType, send : SendType |}) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('helloListener', () => {\n        const listener = listenForHello({ on });\n\n        const parent = getAncestor();\n        if (parent) {\n            sayHello(parent, { send }).catch(err => {\n                // $FlowFixMe\n                if (__TEST__ && getGlobal(parent)) {\n                    throw err;\n                }\n            });\n        }\n\n        return listener;\n    });\n}\n\nexport function awaitWindowHello(win : CrossDomainWindowType, timeout : number = 5000, name : string = 'Window') : ZalgoPromise<{| domain : string |}> {\n    let promise = getHelloPromise(win);\n\n    if (timeout !== -1) {\n        promise = promise.timeout(timeout, new Error(`${ name } did not load after ${ timeout }ms`));\n    }\n\n    return promise;\n}\n","/* @flow */\n\nexport const MESSAGE_TYPE = {\n    REQUEST:  ('postrobot_message_request' : 'postrobot_message_request'),\n    RESPONSE: ('postrobot_message_response' : 'postrobot_message_response'),\n    ACK:      ('postrobot_message_ack' : 'postrobot_message_ack')\n};\n\nexport const MESSAGE_ACK = {\n    SUCCESS: ('success' : 'success'),\n    ERROR:   ('error' : 'error')\n};\n\nexport const MESSAGE_NAME = {\n    METHOD:      ('postrobot_method' : 'postrobot_method'),\n    HELLO:       ('postrobot_hello' : 'postrobot_hello'),\n    OPEN_TUNNEL: ('postrobot_open_tunnel' : 'postrobot_open_tunnel')\n};\n\nexport const SEND_STRATEGY = {\n    POST_MESSAGE: ('postrobot_post_message' : 'postrobot_post_message'),\n    BRIDGE:       ('postrobot_bridge' : 'postrobot_bridge'),\n    GLOBAL:       ('postrobot_global' : 'postrobot_global')\n};\n\nexport const BRIDGE_NAME_PREFIX = '__postrobot_bridge__';\nexport const POSTROBOT_PROXY =    '__postrobot_proxy__';\n\nexport const WILDCARD = '*';\n\nexport const SERIALIZATION_TYPE = {\n    CROSS_DOMAIN_ZALGO_PROMISE: ('cross_domain_zalgo_promise' : 'cross_domain_zalgo_promise'),\n    CROSS_DOMAIN_FUNCTION:      ('cross_domain_function' : 'cross_domain_function'),\n    CROSS_DOMAIN_WINDOW:        ('cross_domain_window' : 'cross_domain_window')\n};\n\nexport const METHOD = {\n    GET:  ('get' : 'get'),\n    POST: ('post' : 'post')\n};\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { windowStore } from '../global';\n\nexport function markWindowKnown(win : CrossDomainWindowType) {\n    const knownWindows = windowStore('knownWindows');\n    knownWindows.set(win, true);\n}\n\nexport function isWindowKnown(win : CrossDomainWindowType) : boolean {\n    const knownWindows = windowStore('knownWindows');\n    return knownWindows.get(win, false);\n}\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { CustomSerializedType } from './types';\n\nexport function isSerializedType(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null && typeof item.__type__ === 'string');\n}\n\nexport function determineType(val : mixed) : $Values<typeof TYPE> | void {\n    if (typeof val === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    if (val === null) {\n        return TYPE.NULL;\n    }\n\n    if (Array.isArray(val)) {\n        return TYPE.ARRAY;\n    }\n\n    if (typeof val === 'function') {\n        return TYPE.FUNCTION;\n    }\n\n    if (typeof val === 'object') {\n\n        if (val instanceof Error) {\n            return TYPE.ERROR;\n        }\n\n        if (typeof val.then === 'function') {\n            return TYPE.PROMISE;\n        }\n\n        // $FlowFixMe method-unbinding\n        if (Object.prototype.toString.call(val) === '[object RegExp]') {\n            return TYPE.REGEX;\n        }\n\n        // $FlowFixMe method-unbinding\n        if (Object.prototype.toString.call(val) === '[object Date]') {\n            return TYPE.DATE;\n        }\n\n        return TYPE.OBJECT;\n    }\n\n    if (typeof val === 'string') {\n        return TYPE.STRING;\n    }\n\n    if (typeof val === 'number') {\n        return TYPE.NUMBER;\n    }\n\n    if (typeof val === 'boolean') {\n        return TYPE.BOOLEAN;\n    }\n}\n\nexport function serializeType<T : string, V : mixed>(type : T, val : V) : CustomSerializedType<T, V> {\n    return {\n        __type__: type,\n        __val__:  val\n    };\n}\n","/* @flow */\n\nexport const TYPE = {\n    FUNCTION:  ('function' : 'function'),\n    ERROR:     ('error' : 'error'),\n    PROMISE:   ('promise' : 'promise'),\n    REGEX:     ('regex' : 'regex'),\n    DATE:      ('date' : 'date'),\n    ARRAY:     ('array' : 'array'),\n    OBJECT:    ('object' : 'object'),\n    STRING:    ('string' : 'string'),\n    NUMBER:    ('number' : 'number'),\n    BOOLEAN:   ('boolean' : 'boolean'),\n    NULL:      ('null' : 'null'),\n    UNDEFINED: ('undefined' : 'undefined')\n};\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { Thenable, CustomSerializedType, NativeSerializedType } from './types';\nimport { determineType, isSerializedType } from './common';\nimport {\n    serializeFunction,\n    serializeError, type SerializedError,\n    serializePromise,\n    serializeRegex, type SerializedRegex,\n    serializeDate, type SerializedDate,\n    serializeArray,\n    serializeObject,\n    serializeString,\n    serializeNumber,\n    serializeBoolean,\n    serializeNull,\n    serializeUndefined\n} from './serializers';\n\ntype NativeSerializer<V : mixed, S : mixed, T : $Values<typeof TYPE>> = (value : V, key : string) => NativeSerializedType<T, S>;\ntype CustomSerializer<V : mixed, S : mixed, T : string> = (value : V, key : string) => CustomSerializedType<T, S>;\ntype PrimitiveSerializer<V : mixed, S : mixed> = (value : V, key : string) => S;\ntype CustomOrPrimitiveSerializer<V : mixed, T : string> = CustomSerializer<V, *, T> | PrimitiveSerializer<V, *>;\ntype NativeOrCustomOrPrimitiveSerializer<V : mixed, S : mixed, T : string> = NativeSerializer<V, S, T> | CustomOrPrimitiveSerializer<V, T>;\n\ntype Serializers = {|\n    function? : CustomOrPrimitiveSerializer<Function, typeof TYPE.FUNCTION>,\n    error? : NativeOrCustomOrPrimitiveSerializer<Error, SerializedError, typeof TYPE.ERROR>,\n    promise? : CustomOrPrimitiveSerializer<Thenable, typeof TYPE.PROMISE>,\n    regex? : NativeOrCustomOrPrimitiveSerializer<RegExp, SerializedRegex, typeof TYPE.REGEX>,\n    date? : NativeOrCustomOrPrimitiveSerializer<Date, SerializedDate, typeof TYPE.DATE>,\n    array? : CustomOrPrimitiveSerializer<$ReadOnlyArray<mixed>, typeof TYPE.ARRAY>,\n    object? : CustomOrPrimitiveSerializer<Object, typeof TYPE.OBJECT>,\n    string? : CustomOrPrimitiveSerializer<string, typeof TYPE.STRING>,\n    number? : CustomOrPrimitiveSerializer<number, typeof TYPE.NUMBER>,\n    boolean? : CustomOrPrimitiveSerializer<boolean, typeof TYPE.BOOLEAN>,\n    null? : CustomOrPrimitiveSerializer<null, typeof TYPE.NULL>,\n    undefined? : CustomOrPrimitiveSerializer<void, typeof TYPE.UNDEFINED>\n|};\n\nconst SERIALIZER : Serializers = {\n    [ TYPE.FUNCTION ]:  serializeFunction,\n    [ TYPE.ERROR ]:     serializeError,\n    [ TYPE.PROMISE ]:   serializePromise,\n    [ TYPE.REGEX ]:     serializeRegex,\n    [ TYPE.DATE ]:      serializeDate,\n    [ TYPE.ARRAY ]:     serializeArray,\n    [ TYPE.OBJECT ]:    serializeObject,\n    [ TYPE.STRING ]:    serializeString,\n    [ TYPE.NUMBER ]:    serializeNumber,\n    [ TYPE.BOOLEAN ]:   serializeBoolean,\n    [ TYPE.NULL ]:      serializeNull,\n    [ TYPE.UNDEFINED ]: serializeUndefined\n};\n\n// $FlowFixMe\nconst defaultSerializers : Serializers = {};\n\nexport function serialize<T : mixed>(obj : T, serializers : Serializers = defaultSerializers) : string {\n\n    function replacer(key) : ?mixed {\n        const val = this[key];\n\n        if (isSerializedType(this)) {\n            return val;\n        }\n        \n        const type = determineType(val);\n\n        if (!type) {\n            return val;\n        }\n\n        // $FlowFixMe\n        const serializer = serializers[type] || SERIALIZER[type];\n\n        if (!serializer) {\n            return val;\n        }\n\n        return serializer(val, key);\n    }\n\n    const result = JSON.stringify(obj, replacer);\n\n    if (typeof result === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    return result;\n}\n","/* @flow */\n\nexport type SerializedFunction = void;\n\nexport function serializeFunction() : SerializedFunction {\n    // pass\n}\n\nexport function deserializeFunction() {\n    throw new Error(`Function serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nimport { serializeObject } from './object';\n\nexport type SerializedError = {|\n    message : string,\n    stack : string,\n    code : string | number | void,\n    data : mixed\n|};\n\n// $FlowFixMe\nexport function serializeError({ message, stack, code, data } : Error) : NativeSerializedType<typeof TYPE.ERROR, SerializedError> {\n    return serializeType(TYPE.ERROR, { message, stack, code, data });\n}\n\nexport function deserializeError({ message, stack, code, data } : SerializedError) : Error {\n    const error = new Error(message);\n    // $FlowFixMe\n    error.code = code;\n\n    if (data) {\n        // $FlowFixMe\n        error.data = serializeObject(data);\n    }\n\n    error.stack = `${ stack }\\n\\n${ error.stack }`;\n    return error;\n}\n","/* @flow */\n\nimport type { Thenable } from '../types';\n\nexport type SerializedPromise = void;\n\nexport function serializePromise() : SerializedPromise {\n    // pass\n}\n\nexport function deserializePromise() : Thenable {\n    throw new Error(`Promise serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedRegex = string;\n\nexport function serializeRegex(val : RegExp) : NativeSerializedType<typeof TYPE.REGEX, SerializedRegex> {\n    return serializeType(TYPE.REGEX, val.source);\n}\n\nexport function deserializeRegex(val : string) : RegExp {\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    return new RegExp(val);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedDate = string;\n\nexport function serializeDate(val : Date) : NativeSerializedType<typeof TYPE.DATE, SerializedDate> {\n    return serializeType(TYPE.DATE, val.toJSON());\n}\n\nexport function deserializeDate(val : string) : Date {\n    return new Date(val);\n}\n","/* @flow */\n\nexport type SerializedArray<T : mixed = mixed> = $ReadOnlyArray<T>;\n\nexport function serializeArray<T : mixed>(val : $ReadOnlyArray<T>) : SerializedArray<T> {\n    return val;\n}\n\nexport function deserializeArray<T : mixed>(val : SerializedArray<T>) : $ReadOnlyArray<T> {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedObject = Object;\n\nexport function serializeObject(val : Object) : SerializedObject {\n    return val;\n}\n\nexport function deserializeObject(val : SerializedObject) : Object {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedString = string;\n\nexport function serializeString(val : string) : SerializedString {\n    return val;\n}\n\nexport function deserializeString(val : SerializedString) : string {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNumber = number;\n\nexport function serializeNumber(val : number) : SerializedNumber {\n    return val;\n}\n\nexport function deserializeNumber(val : SerializedNumber) : number {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedBoolean = boolean;\n\nexport function serializeBoolean(val : boolean) : SerializedBoolean {\n    return val;\n}\n\nexport function deserializeBoolean(val : SerializedBoolean) : boolean {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNull = null;\n\nexport function serializeNull(val : null) : SerializedNull {\n    return val;\n}\n\nexport function deserializeNull(val : SerializedNull) : null {\n    return val;\n}\n","/* @flow */\n\nimport type { NativeSerializedType } from '../types';\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\n\nexport type SerializedUndefined = void;\n\nexport function serializeUndefined(val : void) : NativeSerializedType<typeof TYPE.UNDEFINED, SerializedUndefined> {\n    return serializeType(TYPE.UNDEFINED, val);\n}\n\nexport function deserializeUndefined() : void {\n    // pass\n}\n","/* @flow */\n\nimport type { Thenable } from './types';\nimport { TYPE } from './constants';\nimport { determineType, isSerializedType } from './common';\nimport {\n    deserializeFunction,\n    deserializeError, type SerializedError,\n    deserializePromise,\n    deserializeRegex, type SerializedRegex,\n    deserializeDate, type SerializedDate,\n    deserializeArray,\n    deserializeObject,\n    deserializeString,\n    deserializeNumber,\n    deserializeBoolean,\n    deserializeNull,\n    deserializeUndefined\n} from './serializers';\n\ntype Deserializer<V : mixed, S : mixed> = (serializedValue : S, key : string) => V;\ntype PrimitiveDeserializer<V, S = V> = (serializedValue : S, key : string) => V;\n\ntype Deserializers = {\n    function? : Deserializer<Function, *>,\n    error? : Deserializer<Error, SerializedError>,\n    promise? : Deserializer<Thenable, *>,\n    regex? : Deserializer<RegExp, SerializedRegex>,\n    date? : Deserializer<Date, SerializedDate>,\n    array? : PrimitiveDeserializer<$ReadOnlyArray<mixed>>,\n    object? : PrimitiveDeserializer<Object>,\n    string? : PrimitiveDeserializer<string>,\n    number? : PrimitiveDeserializer<number>,\n    boolean? : PrimitiveDeserializer<boolean>,\n    null? : PrimitiveDeserializer<null>,\n    [string] : Deserializer<mixed, *>,\n    undefined? : PrimitiveDeserializer<void>\n};\n\n// $FlowFixMe\nconst DESERIALIZER : Deserializers = {\n    [ TYPE.FUNCTION ]:  deserializeFunction,\n    [ TYPE.ERROR ]:     deserializeError,\n    [ TYPE.PROMISE ]:   deserializePromise,\n    [ TYPE.REGEX ]:     deserializeRegex,\n    [ TYPE.DATE ]:      deserializeDate,\n    [ TYPE.ARRAY ]:     deserializeArray,\n    [ TYPE.OBJECT ]:    deserializeObject,\n    [ TYPE.STRING ]:    deserializeString,\n    [ TYPE.NUMBER ]:    deserializeNumber,\n    [ TYPE.BOOLEAN ]:   deserializeBoolean,\n    [ TYPE.NULL ]:      deserializeNull,\n    [ TYPE.UNDEFINED ]: deserializeUndefined\n};\n\n// $FlowFixMe\nconst defaultDeserializers : Deserializers = {};\n\nexport function deserialize<T : mixed | null | void>(str : string, deserializers : Deserializers = defaultDeserializers) : T {\n    if (str === TYPE.UNDEFINED) {\n        // $FlowFixMe\n        return;\n    }\n\n    function replacer(key, val) : ?mixed {\n        if (isSerializedType(this)) {\n            return val;\n        }\n\n        let type;\n        let value;\n\n        if (isSerializedType(val)) {\n            type = val.__type__;\n            value = val.__val__;\n        } else {\n            type = determineType(val);\n            value = val;\n        }\n\n        if (!type) {\n            return value;\n        }\n\n        // $FlowFixMe\n        const deserializer = deserializers[type] || DESERIALIZER[type];\n\n        if (!deserializer) {\n            return value;\n        }\n\n        return deserializer(value, key);\n    }\n\n    return JSON.parse(str, replacer);\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, isSameDomain, isOpener, isSameTopWindow, matchDomain, getUserAgent, getDomainFromUrl, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { BRIDGE_NAME_PREFIX } from '../conf';\nimport { windowStore } from '../global';\n\nexport function needsBridgeForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForWin(win : CrossDomainWindowType) : boolean {\n\n    if (!isSameTopWindow(window, win)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForDomain(domain : ?string, win : ?CrossDomainWindowType) : boolean {\n\n    if (domain) {\n        if (getDomain() !== getDomainFromUrl(domain)) {\n            return true;\n        }\n    } else if (win) {\n        if (!isSameDomain(win))  {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function needsBridge({ win, domain } : {| win? : CrossDomainWindowType, domain? : string |}) : boolean {\n\n    if (!needsBridgeForBrowser()) {\n        return false;\n    }\n\n    if (domain && !needsBridgeForDomain(domain, win)) {\n        return false;\n    }\n\n    if (win && !needsBridgeForWin(win)) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function getBridgeName(domain : string) : string {\n\n    domain = domain || getDomainFromUrl(domain);\n\n    const sanitizedDomain = domain.replace(/[^a-zA-Z0-9]+/g, '_');\n\n    const id = `${ BRIDGE_NAME_PREFIX }_${ sanitizedDomain }`;\n\n    return id;\n}\n\nexport function isBridge() : boolean {\n    return Boolean(window.name && window.name === getBridgeName(getDomain()));\n}\n\nexport const documentBodyReady : ZalgoPromise<HTMLBodyElement> = new ZalgoPromise(resolve => {\n\n    if (window.document && window.document.body) {\n        return resolve(window.document.body);\n    }\n\n    const interval = setInterval(() => {\n        if (window.document && window.document.body) {\n            clearInterval(interval);\n            return resolve(window.document.body);\n        }\n    }, 10);\n});\n\nexport function registerRemoteWindow(win : CrossDomainWindowType) {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    remoteWindowPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nexport function findRemoteWindow(win : CrossDomainWindowType) : ZalgoPromise<(remoteWin : CrossDomainWindowType, message : string, remoteDomain : string) => void> {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    const remoteWinPromise = remoteWindowPromises.get(win);\n\n    if (!remoteWinPromise) {\n        throw new Error(`Remote window promise not found`);\n    }\n\n    return remoteWinPromise;\n}\n\ntype SendMessageType = {|\n    (string) : void,\n    fireAndForget : (string) => void\n|};\n\nexport function registerRemoteSendMessage(win : CrossDomainWindowType, domain : string, sendMessage : SendMessageType) {\n    const sendMessageWrapper = (remoteWin : CrossDomainWindowType, remoteDomain : string, message : string) => {\n        if (remoteWin !== win) {\n            throw new Error(`Remote window does not match window`);\n        }\n\n        if (!matchDomain(remoteDomain, domain)) {\n            throw new Error(`Remote domain ${ remoteDomain } does not match domain ${ domain }`);\n        }\n\n        sendMessage.fireAndForget(message);\n    };\n\n    findRemoteWindow(win).resolve(sendMessageWrapper);\n}\n\nexport function rejectRemoteSendMessage(win : CrossDomainWindowType, err : Error) {\n    findRemoteWindow(win).reject(err).catch(noop);\n}\n\nexport function sendBridgeMessage(win : CrossDomainWindowType, domain : string, message : string) : ZalgoPromise<void> {\n\n    const messagingChild  = isOpener(window, win);\n    const messagingParent = isOpener(win, window);\n\n    if (!messagingChild && !messagingParent) {\n        throw new Error(`Can only send messages to and from parent and popup windows`);\n    }\n\n    return findRemoteWindow(win).then(sendMessage => {\n        return sendMessage(win, domain, message);\n    });\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, getFrameByName, isWindowClosed, getDomainFromUrl, normalizeMockUrl, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { BRIDGE_TIMEOUT, MESSAGE_NAME } from '../conf';\nimport { awaitWindowHello } from '../lib';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { getBridgeName, documentBodyReady, registerRemoteSendMessage, registerRemoteWindow } from './common';\n\ntype WinDetails = {|\n    win : CrossDomainWindowType,\n    domain? : ?string,\n    name? : ?string\n|};\n\nexport function listenForOpenTunnel({ on, send, receiveMessage } : {| on : OnType, send : SendType, receiveMessage : ReceiveMessageType |}) {\n    const popupWindowsByName = globalStore('popupWindowsByName');\n\n    on(MESSAGE_NAME.OPEN_TUNNEL, ({ source, origin, data }) => {\n        const bridgePromise = globalStore('bridges').get(origin);\n\n        if (!bridgePromise) {\n            throw new Error(`Can not find bridge promise for domain ${ origin }`);\n        }\n\n        return bridgePromise.then(bridge => {\n            if (source !== bridge) {\n                throw new Error(`Message source does not matched registered bridge for domain ${ origin }`);\n            }\n\n            if (!data.name) {\n                throw new Error(`Register window expected to be passed window name`);\n            }\n\n            if (!data.sendMessage) {\n                throw new Error(`Register window expected to be passed sendMessage method`);\n            }\n\n            if (!popupWindowsByName.has(data.name)) {\n                throw new Error(`Window with name ${ data.name } does not exist, or was not opened by this window`);\n            }\n\n            const getWindowDetails = () : WinDetails => {\n                const winDetails = popupWindowsByName.get(data.name);\n                // $FlowFixMe\n                return winDetails;\n            };\n\n            if (!getWindowDetails().domain) {\n                throw new Error(`We do not have a registered domain for window ${ data.name }`);\n            }\n\n            if (getWindowDetails().domain !== origin) {\n                throw new Error(`Message origin ${ origin } does not matched registered window origin ${ getWindowDetails().domain || 'unknown' }`);\n            }\n\n            registerRemoteSendMessage(getWindowDetails().win, origin, data.sendMessage);\n\n            return {\n                sendMessage(message) {\n\n                    if (!window || window.closed) {\n                        return;\n                    }\n\n                    if (!getWindowDetails()) {\n                        return;\n                    }\n\n                    const domain = getWindowDetails().domain;\n\n                    if (!domain) {\n                        return;\n                    }\n\n                    try {\n                        receiveMessage({\n                            data:   message,\n                            origin: domain,\n                            source: getWindowDetails().win\n                        }, { on, send });\n                    } catch (err) {\n                        ZalgoPromise.reject(err);\n                    }\n                }\n            };\n        });\n    });\n}\n\nfunction openBridgeFrame(name : string, url : string) : HTMLIFrameElement {\n\n    const iframe = document.createElement(`iframe`);\n\n    iframe.setAttribute(`name`, name);\n    iframe.setAttribute(`id`,   name);\n\n    iframe.setAttribute(`style`, `display: none; margin: 0; padding: 0; border: 0px none; overflow: hidden;`);\n    iframe.setAttribute(`frameborder`, `0`);\n    iframe.setAttribute(`border`, `0`);\n    iframe.setAttribute(`scrolling`, `no`);\n    iframe.setAttribute(`allowTransparency`, `true`);\n\n    iframe.setAttribute(`tabindex`, `-1`);\n    iframe.setAttribute(`hidden`, `true`);\n    iframe.setAttribute(`title`, ``);\n    iframe.setAttribute(`role`, `presentation`);\n\n    iframe.src = url;\n\n    return iframe;\n}\n\nexport function hasBridge(url : string, domain : string) : boolean {\n    const bridges = globalStore('bridges');\n    return bridges.has(domain || getDomainFromUrl(url));\n}\n\nexport function openBridge(url : string, domain : string) : ZalgoPromise<CrossDomainWindowType> {\n    const bridges = globalStore('bridges');\n    const bridgeFrames = globalStore('bridgeFrames');\n    \n    domain = domain || getDomainFromUrl(url);\n    \n    return bridges.getOrSet(domain, () => ZalgoPromise.try(() => {\n\n        if (getDomain() === domain) {\n            throw new Error(`Can not open bridge on the same domain as current domain: ${ domain }`);\n        }\n\n        const name  = getBridgeName(domain);\n        const frame = getFrameByName(window, name);\n\n        if (frame) {\n            throw new Error(`Frame with name ${ name } already exists on page`);\n        }\n\n        const iframe = openBridgeFrame(name, url);\n        bridgeFrames.set(domain, iframe);\n\n        return documentBodyReady.then(body => {\n\n            body.appendChild(iframe);\n            const bridge = iframe.contentWindow;\n\n            return new ZalgoPromise((resolve, reject) => {\n\n                iframe.addEventListener('load', resolve);\n                iframe.addEventListener('error', reject);\n\n            }).then(() => {\n\n                return awaitWindowHello(bridge, BRIDGE_TIMEOUT, `Bridge ${ url }`);\n\n            }).then(() => {\n\n                return bridge;\n            });\n        });\n    }));\n}\n\nexport function linkWindow({ win, name, domain } : WinDetails) : WinDetails {\n    const popupWindowsByName = globalStore('popupWindowsByName');\n    const popupWindowsByWin = windowStore('popupWindowsByWin');\n\n    for (const winName of popupWindowsByName.keys()) {\n        const details = popupWindowsByName.get(winName);\n        if (!details || isWindowClosed(details.win)) {\n            popupWindowsByName.del(winName);\n        }\n    }\n\n    if (isWindowClosed(win)) {\n        return { win, name, domain };\n    }\n\n    const details = popupWindowsByWin.getOrSet(win, () : WinDetails => {\n        if (!name) {\n            return { win };\n        }\n        \n        // $FlowFixMe\n        return popupWindowsByName.getOrSet(name, () : WinDetails => {\n            return { win, name };\n        });\n    });\n\n    if (details.win && details.win !== win) {\n        throw new Error(`Different window already linked for window: ${ name || 'undefined' }`);\n    }\n\n    if (name) {\n        details.name = name;\n        popupWindowsByName.set(name, details);\n    }\n\n    if (domain) {\n        details.domain = domain;\n        registerRemoteWindow(win);\n    }\n\n    popupWindowsByWin.set(win, details);\n    \n    return details;\n}\n\nexport function linkUrl(win : CrossDomainWindowType, url : string) {\n    linkWindow({ win, domain: getDomainFromUrl(url) });\n}\n\nexport function listenForWindowOpen() {\n    const windowOpen = window.open;\n\n    window.open = function windowOpenWrapper(url : string, name : string, options : string, last : mixed) : mixed {\n        const win = windowOpen.call(this, normalizeMockUrl(url), name, options, last);\n    \n        if (!win) {\n            return win;\n        }\n    \n        linkWindow({ win, name, domain: url ? getDomainFromUrl(url) : null });\n    \n        return win;\n    };\n}\n\nexport function destroyBridges() {\n    const bridges = globalStore('bridges');\n    const bridgeFrames = globalStore('bridgeFrames');\n\n    for (const domain of bridgeFrames.keys()) {\n        const frame = bridgeFrames.get(domain);\n        if (frame && frame.parentNode) {\n            frame.parentNode.removeChild(frame);\n        }\n    }\n    bridgeFrames.reset();\n    bridges.reset();\n}\n","/* @flow */\n\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { listenForWindowOpen, listenForOpenTunnel } from './parent';\nimport { setupOpenTunnelToParent } from './bridge';\nimport { openTunnelToOpener } from './child';\n\nexport function setupBridge({ on, send, receiveMessage } : {| on : OnType, send : SendType, receiveMessage : ReceiveMessageType |}) {\n    listenForWindowOpen();\n    listenForOpenTunnel({ on, send, receiveMessage });\n    setupOpenTunnelToParent({ send });\n    openTunnelToOpener({ on, send, receiveMessage });\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { getParent, isWindowClosed, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop, uniqueID } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { getGlobal, globalStore } from '../global';\nimport type { SendType, ResponseMessageEvent } from '../types';\n\nfunction cleanTunnelWindows() {\n    const tunnelWindows = globalStore('tunnelWindows');\n\n    for (const key of tunnelWindows.keys()) {\n        const tunnelWindow = tunnelWindows[key];\n\n        try {\n            noop(tunnelWindow.source);\n        } catch (err) {\n            tunnelWindows.del(key);\n            continue;\n        }\n\n        if (isWindowClosed(tunnelWindow.source)) {\n            tunnelWindows.del(key);\n        }\n    }\n}\n\ntype TunnelWindowDataType = {|\n    name : string,\n    source : CrossDomainWindowType,\n    canary : () => void,\n    sendMessage : (message : string) => void\n|};\n\nfunction addTunnelWindow({ name, source, canary, sendMessage } : TunnelWindowDataType) : string {\n    cleanTunnelWindows();\n    const id = uniqueID();\n    const tunnelWindows = globalStore('tunnelWindows');\n    tunnelWindows.set(id, { name, source, canary, sendMessage });\n    return id;\n}\n\nexport function setupOpenTunnelToParent({ send } : {| send : SendType |}) {\n    getGlobal(window).openTunnelToParent = function openTunnelToParent({ name, source, canary, sendMessage } : TunnelWindowDataType) : ZalgoPromise<ResponseMessageEvent> {\n\n        const tunnelWindows = globalStore('tunnelWindows');\n        const parentWindow = getParent(window);\n    \n        if (!parentWindow) {\n            throw new Error(`No parent window found to open tunnel to`);\n        }\n    \n        const id = addTunnelWindow({ name, source, canary, sendMessage });\n    \n        return send(parentWindow, MESSAGE_NAME.OPEN_TUNNEL, {\n    \n            name,\n    \n            sendMessage() {\n    \n                const tunnelWindow = tunnelWindows.get(id);\n    \n                try {\n                    // IE gets antsy if you try to even reference a closed window\n                    noop(tunnelWindow && tunnelWindow.source);\n                } catch (err) {\n                    tunnelWindows.del(id);\n                    return;\n                }\n    \n                if (!tunnelWindow || !tunnelWindow.source || isWindowClosed(tunnelWindow.source)) {\n                    return;\n                }\n    \n                try {\n                    tunnelWindow.canary();\n                } catch (err) {\n                    return;\n                }\n    \n                // $FlowFixMe[object-this-reference]\n                tunnelWindow.sendMessage.apply(this, arguments);\n            }\n    \n        }, { domain: WILDCARD });\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isSameDomain, getOpener, getDomain, getFrameByName, assertSameDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { getGlobal, windowStore } from '../global';\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { needsBridge, registerRemoteWindow, rejectRemoteSendMessage, registerRemoteSendMessage, getBridgeName } from './common';\n\nfunction awaitRemoteBridgeForWindow (win : CrossDomainWindowType) : ZalgoPromise<?CrossDomainWindowType> {\n    return windowStore('remoteBridgeAwaiters').getOrSet(win, () => {\n        return ZalgoPromise.try(() => {\n            const frame = getFrameByName(win, getBridgeName(getDomain()));\n\n            if (!frame) {\n                return;\n            }\n\n            if (isSameDomain(frame) && getGlobal(assertSameDomain(frame))) {\n                return frame;\n            }\n\n            return new ZalgoPromise(resolve => {\n\n                let interval;\n                let timeout; // eslint-disable-line prefer-const\n\n                interval = setInterval(() => { // eslint-disable-line prefer-const\n                    if (frame && isSameDomain(frame) && getGlobal(assertSameDomain(frame))) {\n                        clearInterval(interval);\n                        clearTimeout(timeout);\n                        return resolve(frame);\n                    }\n                }, 100);\n\n                timeout = setTimeout(() => {\n                    clearInterval(interval);\n                    return resolve();\n                }, 2000);\n            });\n        });\n    });\n}\n\nexport function openTunnelToOpener({ on, send, receiveMessage } : {| on : OnType, send : SendType, receiveMessage : ReceiveMessageType |}) : ZalgoPromise<void> {\n    return ZalgoPromise.try(() => {\n        const opener = getOpener(window);\n        \n        if (!opener || !needsBridge({ win: opener })) {\n            return;\n        }\n\n        registerRemoteWindow(opener);\n\n        return awaitRemoteBridgeForWindow(opener).then(bridge => {\n\n            if (!bridge) {\n                return rejectRemoteSendMessage(opener, new Error(`Can not register with opener: no bridge found in opener`));\n            }\n\n            if (!window.name) {\n                return rejectRemoteSendMessage(opener, new Error(`Can not register with opener: window does not have a name`));\n            }\n\n            return getGlobal(assertSameDomain(bridge)).openTunnelToParent({\n\n                name: window.name,\n\n                source: window,\n\n                canary() {\n                    // pass\n                },\n\n                sendMessage(message) {\n\n                    try {\n                        noop(window);\n                    } catch (err) {\n                        return;\n                    }\n\n                    if (!window || window.closed) {\n                        return;\n                    }\n\n                    try {\n                        receiveMessage({\n                            data:   message,\n                            // $FlowFixMe[object-this-reference]\n                            origin: this.origin,\n                            // $FlowFixMe[object-this-reference]\n                            source: this.source\n                        }, { on, send });\n                    } catch (err) {\n                        ZalgoPromise.reject(err);\n                    }\n                }\n\n            }).then(({ source, origin, data }) => {\n\n                if (source !== opener) {\n                    throw new Error(`Source does not match opener`);\n                }\n\n                registerRemoteSendMessage(source, origin, data.sendMessage);\n\n            }).catch(err => {\n\n                rejectRemoteSendMessage(opener, err);\n                throw err;\n            });\n        });\n    });\n}\n","/* @flow */\n\nimport { isSameDomain, isWindowClosed, type CrossDomainWindowType, closeWindow,\n    type DomainMatcher, getOpener, WINDOW_TYPE, isWindow, assertSameDomain, getFrameForWindow } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, memoizePromise, noop, submitForm } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE, METHOD } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport { getWindowInstanceID } from '../lib';\nimport { linkWindow } from '../bridge';\nimport type { SendType } from '../types';\n\nfunction cleanupProxyWindows() {\n    const idToProxyWindow = globalStore('idToProxyWindow');\n    for (const id of idToProxyWindow.keys()) {\n        // $FlowFixMe\n        if (idToProxyWindow.get(id).shouldClean()) {\n            idToProxyWindow.del(id);\n        }\n    }\n}\n\ntype SetLocationOptions = {|\n    method? : $Values<typeof METHOD>,\n    body? : {|\n        [string] : string | boolean\n    |}\n|};\n\ntype SerializedWindowType = {|\n    id : string,\n    getType : () => ZalgoPromise<$Values<typeof WINDOW_TYPE>>,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    isClosed : () => ZalgoPromise<boolean>,\n    setLocation : (url : string, opts? : SetLocationOptions) => ZalgoPromise<void>,\n    getName : () => ZalgoPromise<?string>,\n    setName : (string) => ZalgoPromise<void>,\n    getInstanceID : () => ZalgoPromise<string>\n|};\n\nfunction getSerializedWindow(winPromise : ZalgoPromise<CrossDomainWindowType>, { send, id = uniqueID() } : {| send : SendType, id? : string |}) : SerializedWindowType {\n    \n    let windowNamePromise = winPromise.then(win => {\n        if (isSameDomain(win)) {\n            return assertSameDomain(win).name;\n        }\n    });\n    \n    const windowTypePromise = winPromise.then(window => {\n        if (!isWindowClosed(window)) {\n            return getOpener(window) ? WINDOW_TYPE.POPUP : WINDOW_TYPE.IFRAME;\n        } else {\n            throw new Error(`Window is closed, can not determine type`);\n        }\n    });\n\n    windowNamePromise.catch(noop);\n    windowTypePromise.catch(noop);\n\n    const getName = () => winPromise.then(win => {\n        if (isWindowClosed(win)) {\n            return;\n        }\n\n        if (isSameDomain(win)) {\n            return assertSameDomain(win).name;\n        }\n\n        return windowNamePromise;\n    });\n\n    const getDefaultSetLocationOptions = () => {\n        // $FlowFixMe\n        return {};\n    };\n\n    const setLocation = (href : string, opts? : SetLocationOptions = getDefaultSetLocationOptions()) => winPromise.then(win => {\n        const domain = `${ window.location.protocol }//${ window.location.host }`;\n        const { method = METHOD.GET, body } = opts;\n\n        if (href.indexOf('/') === 0) {\n            href = `${ domain }${ href }`;\n        } else if (!href.match(/^https?:\\/\\//) && href.indexOf(domain) !== 0) {\n            throw new Error(`Expected url to be http or https url, or absolute path, got ${ JSON.stringify(href) }`);\n        }\n\n        if (method === METHOD.POST) {\n            return getName().then(name => {\n                if (!name) {\n                    throw new Error(`Can not post to window without target name`);\n                }\n\n                submitForm({\n                    url:    href,\n                    target: name,\n                    method,\n                    body\n                });\n            });\n        } else if (method === METHOD.GET) {\n            if (isSameDomain(win)) {\n                try {\n                    if (win.location && typeof win.location.replace === 'function') {\n                        // $FlowFixMe\n                        win.location.replace(href);\n                        return;\n                    }\n                } catch (err) {\n                    // pass\n                }\n            }\n\n            win.location = href;\n\n        } else {\n            throw new Error(`Unsupported method: ${ method }`);\n        }\n    });\n\n    return {\n        id,\n        getType: () => {\n            return windowTypePromise;\n        },\n        getInstanceID: memoizePromise(() => winPromise.then(win => getWindowInstanceID(win, { send }))),\n        close:         () => winPromise.then(closeWindow),\n        getName,\n        focus:         () => winPromise.then(win => {\n            win.focus();\n        }),\n        isClosed: () => winPromise.then(win => {\n            return isWindowClosed(win);\n        }),\n        setLocation,\n        setName: (name) => winPromise.then(win => {\n            if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n                linkWindow({ win, name });\n            }\n\n            const sameDomain = isSameDomain(win);\n            const frame = getFrameForWindow(win);\n\n            if (!sameDomain) {\n                throw new Error(`Can not set name for cross-domain window: ${ name }`);\n            }\n\n            assertSameDomain(win).name = name;\n            if (frame) {\n                frame.setAttribute('name', name);\n            }\n\n            windowNamePromise = ZalgoPromise.resolve(name);\n        })\n    };\n}\n\nexport class ProxyWindow {\n\n    id : string\n    isProxyWindow : true = true\n    serializedWindow : SerializedWindowType\n    actualWindow : ?CrossDomainWindowType\n    actualWindowPromise : ZalgoPromise<CrossDomainWindowType>\n    send : SendType\n    name : string\n\n    constructor({ send, win, serializedWindow } : {| win? : CrossDomainWindowType, serializedWindow? : SerializedWindowType, send : SendType |}) {\n        this.actualWindowPromise = new ZalgoPromise();\n        this.serializedWindow = serializedWindow || getSerializedWindow(this.actualWindowPromise, { send });\n        \n        globalStore('idToProxyWindow').set(this.getID(), this);\n        if (win) {\n            this.setWindow(win, { send });\n        }\n    }\n\n    getID() : string {\n        return this.serializedWindow.id;\n    }\n\n    getType() : ZalgoPromise<$Values<typeof WINDOW_TYPE>> {\n        return this.serializedWindow.getType();\n    }\n\n    isPopup() : ZalgoPromise<boolean> {\n        return this.getType().then(type => {\n            return type === WINDOW_TYPE.POPUP;\n        });\n    }\n\n    setLocation(href : string, opts? : SetLocationOptions) : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.setLocation(href, opts).then(() => this);\n    }\n\n    getName() : ZalgoPromise<?string> {\n        return this.serializedWindow.getName();\n    }\n\n    setName(name : string) : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.setName(name).then(() => this);\n    }\n\n    close() : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.close().then(() => this);\n    }\n\n    focus() : ZalgoPromise<ProxyWindow> {\n        const isPopupPromise = this.isPopup();\n        const getNamePromise = this.getName();\n\n        const reopenPromise = ZalgoPromise.hash({ isPopup: isPopupPromise, name: getNamePromise }).then(({ isPopup, name }) => {\n            if (isPopup && name) {\n                window.open('', name, 'noopener');\n            }\n        });\n        const focusPromise = this.serializedWindow.focus();\n\n        return ZalgoPromise.all([\n            reopenPromise,\n            focusPromise\n        ]).then(() => this);\n    }\n\n    isClosed() : ZalgoPromise<boolean> {\n        return this.serializedWindow.isClosed();\n    }\n\n    getWindow() : ?CrossDomainWindowType {\n        return this.actualWindow;\n    }\n\n    setWindow(win : CrossDomainWindowType, { send } : {| send : SendType |}) {\n        this.actualWindow = win;\n        this.actualWindowPromise.resolve(this.actualWindow);\n        this.serializedWindow = getSerializedWindow(this.actualWindowPromise, { send, id: this.getID() });\n        windowStore('winToProxyWindow').set(win, this);\n    }\n\n    awaitWindow() : ZalgoPromise<CrossDomainWindowType> {\n        return this.actualWindowPromise;\n    }\n\n    matchWindow(win : CrossDomainWindowType, { send } : {| send : SendType |}) : ZalgoPromise<boolean> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                return win === this.actualWindow;\n            }\n            \n            return ZalgoPromise.hash({\n                proxyInstanceID:       this.getInstanceID(),\n                knownWindowInstanceID: getWindowInstanceID(win, { send })\n            }).then(({ proxyInstanceID, knownWindowInstanceID }) => {\n                const match = proxyInstanceID === knownWindowInstanceID;\n\n                if (match) {\n                    this.setWindow(win, { send });\n                }\n\n                return match;\n            });\n        });\n    }\n\n    unwrap() : CrossDomainWindowType | ProxyWindow {\n        return this.actualWindow || this;\n    }\n\n    getInstanceID() : ZalgoPromise<string> {\n        return this.serializedWindow.getInstanceID();\n    }\n\n    shouldClean() : boolean {\n        return Boolean(this.actualWindow && isWindowClosed(this.actualWindow));\n    }\n\n    serialize() : SerializedWindowType {\n        return this.serializedWindow;\n    }\n\n    static unwrap(win : CrossDomainWindowType | ProxyWindow) : CrossDomainWindowType | ProxyWindow {\n        return ProxyWindow.isProxyWindow(win)\n            // $FlowFixMe\n            ? win.unwrap()\n            : win;\n    }\n\n    static serialize(win : CrossDomainWindowType | ProxyWindow, { send } : {| send : SendType |}) : SerializedWindowType {\n        cleanupProxyWindows();\n        return ProxyWindow.toProxyWindow(win, { send }).serialize();\n    }\n\n    static deserialize(serializedWindow : SerializedWindowType, { send } : {| send : SendType |}) : ProxyWindow {\n        cleanupProxyWindows();\n        return globalStore('idToProxyWindow').get(serializedWindow.id) || new ProxyWindow({ serializedWindow, send });\n    }\n\n    static isProxyWindow(obj : CrossDomainWindowType | ProxyWindow) : boolean {\n        // $FlowFixMe\n        return Boolean(obj && !isWindow(obj) && obj.isProxyWindow);\n    }\n\n    static toProxyWindow(win : CrossDomainWindowType | ProxyWindow, { send } : {| send : SendType |}) : ProxyWindow {\n        cleanupProxyWindows();\n\n        if (ProxyWindow.isProxyWindow(win)) {\n            // $FlowFixMe\n            return win;\n        }\n\n        // $FlowFixMe\n        const actualWindow : CrossDomainWindowType = win;\n        \n        return windowStore('winToProxyWindow').get(actualWindow) || new ProxyWindow({ win: actualWindow, send });\n    }\n}\n\nexport type SerializedWindow = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, SerializedWindowType>;\n\nexport function serializeWindow(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, win : CrossDomainWindowType, { send } : {| send : SendType |}) : SerializedWindow {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, ProxyWindow.serialize(win, { send }));\n}\n\nexport function deserializeWindow(source : CrossDomainWindowType | ProxyWindow, origin : string, win : SerializedWindowType, { send } : {| send : SendType |}) : ProxyWindow {\n    return ProxyWindow.deserialize(win, { send });\n}\n","/* @flow */\n\nimport { matchDomain, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, isRegex, arrayFrom } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { MESSAGE_NAME, WILDCARD, SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nimport { ProxyWindow } from './window';\n\ntype StoredMethod = {|\n    name : string,\n    domain : DomainMatcher,\n    val : Function,\n    source : CrossDomainWindowType | ProxyWindow\n|};\n\nfunction addMethod(id : string, val : Function, name : string, source : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher) {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    \n    if (ProxyWindow.isProxyWindow(source)) {\n        proxyWindowMethods.set(id, { val, name, domain, source });\n    } else {\n        proxyWindowMethods.del(id);\n        // $FlowFixMe\n        const methods = methodStore.getOrSet(source, () => ({}));\n        methods[id] = { domain, name, val, source };\n    }\n}\n\nfunction lookupMethod(source : CrossDomainWindowType, id : string) : ?StoredMethod {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    const methods = methodStore.getOrSet(source, () => ({}));\n    return methods[id] || proxyWindowMethods.get(id);\n}\n\nfunction stringifyArguments(args : $ReadOnlyArray<mixed> = []) : string {\n    return arrayFrom(args).map(arg => {\n        if (typeof arg === 'string') {\n            return `'${ arg }'`;\n        }\n        if (arg === undefined) {\n            return 'undefined';\n        }\n        if (arg === null) {\n            return 'null';\n        }\n        if (typeof arg === 'boolean') {\n            return arg.toString();\n        }\n        if (Array.isArray(arg)) {\n            return '[ ... ]';\n        }\n        if (typeof arg === 'object') {\n            return '{ ... }';\n        }\n        if (typeof arg === 'function') {\n            return '() => { ... }';\n        }\n        return `<${ typeof arg }>`;\n    }).join(', ');\n}\n\nfunction listenForFunctionCalls({ on, send } : {| on : OnType, send : SendType |}) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('functionCalls', () => {\n        return on(MESSAGE_NAME.METHOD, { domain: WILDCARD }, ({ source, origin, data } : {| source : CrossDomainWindowType, origin : string, data : Object |}) => {\n            const { id, name } = data;\n\n            const meth = lookupMethod(source, id);\n    \n            if (!meth) {\n                throw new Error(`Could not find method '${ name }' with id: ${ data.id } in ${ getDomain(window) }`);\n            }\n\n            const { source: methodSource, domain, val } = meth;\n            \n            return ZalgoPromise.try(() => {\n                if (!matchDomain(domain, origin)) {\n                    // $FlowFixMe\n                    throw new Error(`Method '${ data.name }' domain ${ JSON.stringify(isRegex(meth.domain) ? meth.domain.source : meth.domain) } does not match origin ${ origin } in ${ getDomain(window) }`);\n                }\n                \n                if (ProxyWindow.isProxyWindow(methodSource)) {\n                    // $FlowFixMe\n                    return methodSource.matchWindow(source, { send }).then(match => {\n                        if (!match) {\n                            throw new Error(`Method call '${ data.name }' failed - proxy window does not match source in ${ getDomain(window) }`);\n                        }\n                    });\n                }\n            }).then(() => {\n                return val.apply({ source, origin }, data.args);\n            }, err => {\n                return ZalgoPromise.try(() => {\n                    if (val.onError) {\n                        return val.onError(err);\n                    }\n                }).then(() => {\n                    // $FlowFixMe\n                    if (err.stack) {\n                        // $FlowFixMe\n                        err.stack = `Remote call to ${ name }(${ stringifyArguments(data.args) }) failed\\n\\n${ err.stack }`;\n                    }\n\n                    throw err;\n                });\n            }).then(result => {\n                return { result, id, name };\n            });\n        });\n    });\n}\n\nexport type SerializedFunction = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, {|\n    id : string,\n    name : string\n|}>;\n\n// eslint-disable-next-line flowtype/require-exact-type\ntype SerializableFunction<T> = {\n    () : ZalgoPromise<T> | T,\n    __id__? : string,\n    __name__? : string\n};\n\nexport function serializeFunction<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : SerializableFunction<T>, key : string, { on, send } : {| on : OnType, send : SendType |}) : SerializedFunction {\n    listenForFunctionCalls({ on, send });\n    \n    const id = val.__id__ || uniqueID();\n    destination = ProxyWindow.unwrap(destination);\n    let name = val.__name__ || val.name || key;\n\n    if (typeof name === 'string' && typeof name.indexOf === 'function' && name.indexOf('anonymous::') === 0) {\n        name = name.replace('anonymous::', `${ key }::`);\n    }\n\n    if (ProxyWindow.isProxyWindow(destination)) {\n        addMethod(id, val, name, destination, domain);\n\n        // $FlowFixMe\n        destination.awaitWindow().then(win => {\n            addMethod(id, val, name, win, domain);\n        });\n    } else {\n        addMethod(id, val, name, destination, domain);\n    }\n\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, { id, name });\n}\n\nexport function deserializeFunction<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { id, name } : {| id : string, name : string |}, { send } : {| send : SendType |}) : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<T> {\n    const getDeserializedFunction = (opts? : Object = {}) => {\n        function crossDomainFunctionWrapper<X : mixed>() : ZalgoPromise<X> {\n            let originalStack;\n    \n            if (__DEBUG__) {\n                originalStack = (new Error(`Original call to ${ name }():`)).stack;\n            }\n    \n            return ProxyWindow.toProxyWindow(source, { send }).awaitWindow().then(win => {\n                const meth = lookupMethod(win, id);\n    \n                if (meth && meth.val !== crossDomainFunctionWrapper) {\n                    return meth.val.apply({ source: window, origin: getDomain() }, arguments);\n                } else {\n                    // $FlowFixMe[method-unbinding]\n                    const args = Array.prototype.slice.call(arguments);\n\n                    if (opts.fireAndForget) {\n                        return send(win, MESSAGE_NAME.METHOD, { id, name, args }, { domain: origin, fireAndForget: true });\n                    } else {\n                        return send(win, MESSAGE_NAME.METHOD, { id, name, args }, { domain: origin, fireAndForget: false })\n                            .then(res => res.data.result);\n                    }\n                }\n    \n            }).catch(err => {\n                // $FlowFixMe\n                if (__DEBUG__ && originalStack && err.stack) {\n                    // $FlowFixMe\n                    err.stack = `Remote call to ${ name }(${ stringifyArguments(arguments) }) failed\\n\\n${ err.stack }\\n\\n${ originalStack }`;\n                }\n                throw err;\n            });\n        }\n\n        crossDomainFunctionWrapper.__name__ = name;\n        crossDomainFunctionWrapper.__origin__ = origin;\n        crossDomainFunctionWrapper.__source__ = source;\n        crossDomainFunctionWrapper.__id__ = id;\n\n        crossDomainFunctionWrapper.origin = origin;\n\n        return crossDomainFunctionWrapper;\n    };\n\n    const crossDomainFunctionWrapper = getDeserializedFunction();\n    crossDomainFunctionWrapper.fireAndForget = getDeserializedFunction({ fireAndForget: true });\n\n    return crossDomainFunctionWrapper;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, isWindow, type DomainMatcher } from 'cross-domain-utils/src';\nimport { TYPE, serialize, deserialize, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, deserializeFunction, type SerializedFunction } from './function';\nimport { serializePromise, deserializePromise, type SerializedPromise } from './promise';\nimport { serializeWindow, deserializeWindow, type SerializedWindow, ProxyWindow } from './window';\n\nexport function serializeMessage<T : mixed>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T, { on, send } : {| on : OnType, send : SendType |}) : string {\n    return serialize(obj, {\n        [ TYPE.PROMISE ]:  (val : Thenable, key : string) : SerializedPromise => serializePromise(destination, domain, val, key, { on, send }),\n        [ TYPE.FUNCTION ]: (val : Function, key : string) : SerializedFunction => serializeFunction(destination, domain, val, key, { on, send }),\n        [ TYPE.OBJECT ]:   (val : CrossDomainWindowType) : Object | SerializedWindow => {\n            return (isWindow(val) || ProxyWindow.isProxyWindow(val)) ? serializeWindow(destination, domain, val, { send }) : val;\n        }\n    });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string, { send } : {| on : OnType, send : SendType |}) : T {\n    return deserialize(message, {\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE ]: (serializedPromise)  => deserializePromise(source, origin, serializedPromise),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION ]:      (serializedFunction) => deserializeFunction(source, origin, serializedFunction, { send }),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW ]:        (serializedWindow)   => deserializeWindow(source, origin, serializedWindow, { send })\n    });\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { serializeType, type CustomSerializedType, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, type SerializedFunction } from './function';\nimport { ProxyWindow } from './window';\n\nexport type SerializedPromise = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {|\n    then : SerializedFunction\n|}>;\n\nexport function serializePromise(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : Thenable, key : string, { on, send } : {| on : OnType, send : SendType |}) : SerializedPromise {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n        then: serializeFunction(destination, domain, (resolve, reject) => val.then(resolve, reject), key, { on, send })\n    });\n}\n\nexport function deserializePromise<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { then } : {| then : Function |}) : ZalgoPromise<T> {\n    return new ZalgoPromise(then);\n}\n","/* @flow */\n\nimport { isSameDomain, isSameTopWindow, isActuallySameDomain, getActualDomain,\n    getDomain, type CrossDomainWindowType, PROTOCOL } from 'cross-domain-utils/src';\n\nimport { SEND_STRATEGY, WILDCARD } from '../../conf';\nimport { needsGlobalMessagingForBrowser } from '../../lib';\nimport { getGlobal } from '../../global';\nimport { sendBridgeMessage, needsBridgeForBrowser, isBridge } from '../../bridge';\n\ntype SendStrategies = {|\n    [$Values<typeof SEND_STRATEGY>] : (CrossDomainWindowType, string, string) => void\n|};\n\nexport const SEND_MESSAGE_STRATEGIES : SendStrategies = {};\n\nSEND_MESSAGE_STRATEGIES[SEND_STRATEGY.POST_MESSAGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : string) => {\n    if (domain.indexOf(PROTOCOL.FILE) === 0) {\n        domain = WILDCARD;\n    }\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(window, win) === false) {\n            return;\n        }\n\n        if (domain.indexOf(PROTOCOL.MOCK) === 0) {\n            if (!isActuallySameDomain(win)) {\n                throw new Error(`Attempting to send message to mock domain ${ domain }, but window is actually cross-domain`);\n            }\n\n            // $FlowFixMe\n            const windowDomain = getDomain(win);\n                \n            if (windowDomain !== domain) {\n                throw new Error(`Mock domain target ${ domain } does not match window domain ${ windowDomain }`);\n            }\n\n            // $FlowFixMe\n            domain = getActualDomain(win);\n\n        }\n    }\n\n    win.postMessage(serializedMessage, domain);\n};\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n\n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.BRIDGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : string) => {\n\n        if (!needsBridgeForBrowser() && !isBridge()) {\n            throw new Error(`Bridge not needed for browser`);\n        }\n\n        if (isSameDomain(win)) {\n            throw new Error(`Post message through bridge disabled between same domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use bridge to communicate between two different windows, not between frames`);\n        }\n\n        sendBridgeMessage(win, domain, serializedMessage);\n    };\n}\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__ || __POST_ROBOT__.__GLOBAL_MESSAGE_SUPPORT__) {\n    \n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.GLOBAL] = (win : CrossDomainWindowType, serializedMessage : string) => {\n\n        if (!needsGlobalMessagingForBrowser()) {\n            throw new Error(`Global messaging not needed for browser`);\n        }\n\n        if (!isSameDomain(win)) {\n            throw new Error(`Post message through global disabled between different domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use global to communicate between two different windows, not between frames`);\n        }\n\n        // $FlowFixMe\n        const foreignGlobal = getGlobal(win);\n\n        if (!foreignGlobal) {\n            throw new Error(`Can not find postRobot global on foreign window`);\n        }\n\n        foreignGlobal.receiveMessage({\n            source: window,\n            origin: getDomain(),\n            data:   serializedMessage\n        });\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindowClosed, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { stringifyError, noop } from 'belter/src';\n\nimport { serializeMessage } from '../../serialize';\nimport { windowStore, getGlobalKey } from '../../global';\nimport type { Message, PackedMessages } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nimport { SEND_MESSAGE_STRATEGIES } from './strategies';\n\nfunction packMessages(messages : $ReadOnlyArray<Message>) : PackedMessages {\n    return {\n        [ getGlobalKey() ]: messages\n    };\n}\n\nexport function sendMessage(win : CrossDomainWindowType, domain : string, message : Message, { on, send } : {| on : OnType, send : SendType |}) : ZalgoPromise<void> {\n    return ZalgoPromise.try(() => {\n        const messageBuffer = windowStore();\n\n        const domainBuffer = messageBuffer.getOrSet(win, () => ({}));\n\n        domainBuffer.buffer = domainBuffer.buffer || [];\n        domainBuffer.buffer.push(message);\n\n        domainBuffer.flush = domainBuffer.flush || ZalgoPromise.flush().then(() => {\n            if (isWindowClosed(win)) {\n                throw new Error('Window is closed');\n            }\n\n            const serializedMessage = serializeMessage(win, domain, packMessages(domainBuffer.buffer || []), { on, send });\n            delete domainBuffer.buffer;\n\n            const strategies = Object.keys(SEND_MESSAGE_STRATEGIES);\n            const errors = [];\n\n            for (const strategyName of strategies) {\n                try {\n                    SEND_MESSAGE_STRATEGIES[strategyName](win, serializedMessage, domain);\n                } catch (err) {\n                    errors.push(err);\n                }\n            }\n\n            if (errors.length === strategies.length) {\n                throw new Error(`All post-robot messaging strategies failed:\\n\\n${ errors.map((err, i) => `${ i }. ${ stringifyError(err) }`).join('\\n\\n') }`);\n            }\n        });\n\n        return domainBuffer.flush.then(() => {\n            delete domainBuffer.flush;\n        });\n    }).then(noop);\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { isRegex, getOrSet, noop } from 'belter/src';\n\nimport { getWildcard, type WildCard, globalStore, windowStore } from '../global';\nimport { WILDCARD } from '../conf';\nimport { ProxyWindow } from '../serialize/window';\n\nexport function resetListeners() {\n    const responseListeners = globalStore('responseListeners');\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    responseListeners.reset();\n    erroredResponseListeners.reset();\n}\n\nconst __DOMAIN_REGEX__ = '__domain_regex__';\n\nexport type RequestListenerType = {|\n    handler : ({| source : CrossDomainWindowType, origin : string, data : mixed |}) => (mixed | ZalgoPromise<mixed>),\n    handleError : (err : mixed) => void\n|};\n\nexport type ResponseListenerType = {|\n    name : string,\n    win : CrossDomainWindowType,\n    domain : DomainMatcher,\n    promise : ZalgoPromise<*>,\n    ack? : ?boolean,\n    cancelled? : ?boolean\n|};\n\nexport function addResponseListener(hash : string, listener : ResponseListenerType) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.set(hash, listener);\n}\n\nexport function getResponseListener(hash : string) : ?ResponseListenerType {\n    const responseListeners = globalStore('responseListeners');\n    return responseListeners.get(hash);\n}\n\nexport function deleteResponseListener(hash : string) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.del(hash);\n}\n\nexport function cancelResponseListeners() {\n    const responseListeners = globalStore('responseListeners');\n    for (const hash of responseListeners.keys()) {\n        const listener = responseListeners.get(hash);\n        if (listener) {\n            listener.cancelled = true;\n        }\n        responseListeners.del(hash);\n    }\n}\n\nexport function markResponseListenerErrored(hash : string) {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    erroredResponseListeners.set(hash, true);\n}\n\nexport function isResponseListenerErrored(hash : string) : boolean {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    return erroredResponseListeners.has(hash);\n}\n\nexport function getRequestListener({ name, win, domain } : {| name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?(string | RegExp) |}) : ?RequestListenerType {\n    const requestListeners = windowStore('requestListeners');\n\n    if (win === WILDCARD) {\n        win = null;\n    }\n\n    if (domain === WILDCARD) {\n        domain = null;\n    }\n\n    if (!name) {\n        throw new Error(`Name required to get request listener`);\n    }\n\n    for (const winQualifier of [ win, getWildcard() ]) {\n        if (!winQualifier) {\n            continue;\n        }\n\n        const nameListeners = requestListeners.get(winQualifier);\n\n        if (!nameListeners) {\n            continue;\n        }\n\n        const domainListeners = nameListeners[name];\n\n        if (!domainListeners) {\n            continue;\n        }\n\n        if (domain && typeof domain === 'string') {\n            if (domainListeners[domain]) {\n                return domainListeners[domain];\n            }\n\n            if (domainListeners[__DOMAIN_REGEX__]) {\n                for (const { regex, listener } of domainListeners[__DOMAIN_REGEX__]) {\n                    if (matchDomain(regex, domain)) {\n                        return listener;\n                    }\n                }\n            }\n        }\n\n        if (domainListeners[WILDCARD]) {\n            return domainListeners[WILDCARD];\n        }\n    }\n}\n\n// eslint-disable-next-line complexity\nexport function addRequestListener({ name, win: winCandidate, domain } : {| name : string, win : ?(CrossDomainWindowType | WildCard | ProxyWindow), domain : ?DomainMatcher |}, listener : RequestListenerType) : {| cancel : () => void |} {\n    const requestListeners = windowStore('requestListeners');\n\n    if (!name || typeof name !== 'string') {\n        throw new Error(`Name required to add request listener`);\n    }\n\n    // $FlowFixMe\n    if (winCandidate && winCandidate !== WILDCARD && ProxyWindow.isProxyWindow(winCandidate)) {\n        // $FlowFixMe\n        const proxyWin : ProxyWindow = winCandidate;\n\n        const requestListenerPromise = proxyWin.awaitWindow().then(actualWin => {\n            return addRequestListener({ name, win: actualWin, domain }, listener);\n        });\n\n        return {\n            cancel: () => {\n                requestListenerPromise.then(requestListener => requestListener.cancel(), noop);\n            }\n        };\n    }\n\n    // $FlowFixMe\n    let win : ?(CrossDomainWindowType | WildCard) = winCandidate;\n\n    if (Array.isArray(win)) {\n        const listenersCollection = [];\n\n        for (const item of win) {\n            listenersCollection.push(addRequestListener({ name, domain, win: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    if (Array.isArray(domain)) {\n        const listenersCollection = [];\n\n        for (const item of domain) {\n            listenersCollection.push(addRequestListener({ name, win, domain: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    const existingListener = getRequestListener({ name, win, domain });\n\n    if (!win || win === WILDCARD) {\n        win = getWildcard();\n    }\n\n    domain = domain || WILDCARD;\n    const strDomain = domain.toString();\n\n    if (existingListener) {\n        if (win && domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (win) {\n            throw new Error(`Request listener already exists for ${ name } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() }`);\n        } else {\n            throw new Error(`Request listener already exists for ${ name }`);\n        }\n    }\n\n    const winNameListeners = requestListeners.getOrSet(win, () => ({}));\n    const winNameDomainListeners = getOrSet(winNameListeners, name, () => ({}));\n\n    let winNameDomainRegexListeners;\n    let winNameDomainRegexListener;\n\n    if (isRegex(domain)) {\n        winNameDomainRegexListeners = getOrSet(winNameDomainListeners, __DOMAIN_REGEX__, () => []);\n        winNameDomainRegexListener = { regex: domain, listener };\n        winNameDomainRegexListeners.push(winNameDomainRegexListener);\n    } else {\n        winNameDomainListeners[strDomain] = listener;\n    }\n\n    return {\n        cancel() {\n            delete winNameDomainListeners[strDomain];\n\n            if (winNameDomainRegexListener) {\n                winNameDomainRegexListeners.splice(winNameDomainRegexListeners.indexOf(winNameDomainRegexListener, 1));\n\n                if (!winNameDomainRegexListeners.length) {\n                    delete winNameDomainListeners[__DOMAIN_REGEX__];\n                }\n            }\n\n            if (!Object.keys(winNameDomainListeners).length) {\n                delete winNameListeners[name];\n            }\n\n            if (win && !Object.keys(winNameListeners).length) {\n                requestListeners.del(win);\n            }\n        }\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, isWindowClosed, matchDomain, stringifyDomainPattern, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop, stringifyError, uniqueID } from 'belter/src';\n\nimport { MESSAGE_TYPE, MESSAGE_ACK, MESSAGE_NAME } from '../../conf';\nimport { sendMessage } from '../send';\nimport { getRequestListener, getResponseListener, deleteResponseListener, isResponseListenerErrored } from '../listeners';\nimport type { RequestMessage, AckResponseMessage, ResponseMessage } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nexport function handleRequest(source : CrossDomainWindowType, origin : string, message : RequestMessage, { on, send } : {| on : OnType, send : SendType |}) : ZalgoPromise<void> {\n\n    const options = getRequestListener({ name: message.name, win: source, domain: origin });\n\n    const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n    if (__DEBUG__) {\n        // eslint-disable-next-line no-console\n        console.info('receive::req', logName, origin, '\\n\\n', message.data);\n    }\n\n    function sendAck() : ZalgoPromise<void> {\n        return ZalgoPromise.flush().then(() => {\n            if (message.fireAndForget || isWindowClosed(source)) {\n                return;\n            }\n\n            try {\n                return sendMessage(source, origin, {\n                    id:     uniqueID(),\n                    origin: getDomain(window),\n                    type:   MESSAGE_TYPE.ACK,\n                    hash:   message.hash,\n                    name:   message.name\n                }, { on, send });\n            } catch (err) {\n                throw new Error(`Send ack message failed for ${ logName } in ${ getDomain() }\\n\\n${ stringifyError(err) }`);\n            }\n        });\n    }\n\n\n    function sendResponse(ack : $Values<typeof MESSAGE_ACK>, data : ?Object, error : ?mixed) : ZalgoPromise<void> {\n        return ZalgoPromise.flush().then(() => {\n            if (message.fireAndForget || isWindowClosed(source)) {\n                return;\n            }\n\n            if (__DEBUG__) {\n                if (ack === MESSAGE_ACK.SUCCESS) {\n                    console.info('respond::res', logName, origin, '\\n\\n', data);  // eslint-disable-line no-console\n                } else if (ack === MESSAGE_ACK.ERROR) {\n                    console.error('respond::err', logName, origin, '\\n\\n', error); // eslint-disable-line no-console\n                }\n            }\n\n            try {\n                return sendMessage(source, origin, {\n                    id:     uniqueID(),\n                    origin: getDomain(window),\n                    type:   MESSAGE_TYPE.RESPONSE,\n                    hash:   message.hash,\n                    name:   message.name,\n                    ack,\n                    data,\n                    error\n                }, { on, send });\n            } catch (err) {\n                throw new Error(`Send response message failed for ${ logName } in ${ getDomain() }\\n\\n${ stringifyError(err) }`);\n            }\n        });\n    }\n\n    \n    return ZalgoPromise.all([\n        sendAck(),\n\n        ZalgoPromise.try(() => {\n\n            if (!options) {\n                throw new Error(`No handler found for post message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n            }\n\n            const data = message.data;\n\n            return options.handler({ source, origin, data });\n\n        }).then(data => {\n            return sendResponse(MESSAGE_ACK.SUCCESS, data);\n\n        }, error => {\n            return sendResponse(MESSAGE_ACK.ERROR, null, error);\n        })\n\n    ]).then(noop).catch(err => {\n        if (options && options.handleError) {\n            return options.handleError(err);\n        } else {\n            throw err;\n        }\n    });\n}\n\nexport function handleAck(source : CrossDomainWindowType, origin : string, message : AckResponseMessage) {\n\n    if (isResponseListenerErrored(message.hash)) {\n        return;\n    }\n\n    const options = getResponseListener(message.hash);\n\n    if (!options) {\n        throw new Error(`No handler found for post message ack for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n    }\n\n    try {\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Ack origin ${ origin } does not match domain ${ options.domain.toString() }`);\n        }\n    \n        if (source !== options.win) {\n            throw new Error(`Ack source does not match registered window`);\n        }\n    } catch (err) {\n        options.promise.reject(err);\n    }\n\n    options.ack = true;\n}\n\nexport function handleResponse(source : CrossDomainWindowType, origin : string, message : ResponseMessage) : void | ZalgoPromise<void> {\n\n    if (isResponseListenerErrored(message.hash)) {\n        return;\n    }\n\n    const options = getResponseListener(message.hash);\n\n    if (!options) {\n        throw new Error(`No handler found for post message response for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n    }\n\n    if (!matchDomain(options.domain, origin)) {\n        throw new Error(`Response origin ${ origin } does not match domain ${ stringifyDomainPattern(options.domain) }`);\n    }\n\n    if (source !== options.win) {\n        throw new Error(`Response source does not match registered window`);\n    }\n\n    deleteResponseListener(message.hash);\n\n    const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n    if (message.ack === MESSAGE_ACK.ERROR) {\n        if (__DEBUG__) {\n            console.error('receive::err', logName, origin, '\\n\\n', message.error); // eslint-disable-line no-console\n        }\n\n        options.promise.reject(message.error);\n\n    } else if (message.ack === MESSAGE_ACK.SUCCESS) {\n        if (__DEBUG__) {\n            console.info('receive::res', logName, origin, '\\n\\n', message.data); // eslint-disable-line no-console\n        }\n\n        options.promise.resolve({ source, origin, data: message.data });\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindowClosed, type CrossDomainWindowType, getDomain, isSameTopWindow, PROTOCOL  } from 'cross-domain-utils/src';\nimport { addEventListener, noop } from 'belter/src';\n\nimport type { Message } from '../types';\nimport { MESSAGE_TYPE } from '../../conf';\nimport { markWindowKnown, needsGlobalMessagingForBrowser } from '../../lib';\nimport { deserializeMessage } from '../../serialize';\nimport { getGlobal, globalStore, getGlobalKey } from '../../global';\nimport type { OnType, SendType, MessageEvent, CancelableType } from '../../types';\n\nimport { handleRequest, handleResponse, handleAck } from './types';\n\nfunction deserializeMessages(message : string, source : CrossDomainWindowType, origin : string, { on, send } : {| on : OnType, send : SendType |}) : ?$ReadOnlyArray<Message> {\n    let parsedMessage;\n\n    try {\n        parsedMessage = deserializeMessage(source, origin, message, { on, send });\n    } catch (err) {\n        return;\n    }\n\n    if (!parsedMessage) {\n        return;\n    }\n\n    if (typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    const parseMessages = parsedMessage[getGlobalKey()];\n\n    if (!Array.isArray(parseMessages)) {\n        return;\n    }\n\n    return parseMessages;\n}\n\nexport function receiveMessage(event : MessageEvent, { on, send } : {| on : OnType, send : SendType |}) {\n    const receivedMessages = globalStore('receivedMessages');\n\n    try {\n        if (!window || window.closed || !event.source) {\n            return;\n        }\n    } catch (err) {\n        return;\n    }\n\n    let { source, origin, data } = event;\n\n    if (__TEST__) {\n        if (isWindowClosed(source)) {\n            return;\n        }\n\n        // $FlowFixMe\n        origin = getDomain(source);\n    }\n\n    const messages = deserializeMessages(data, source, origin, { on, send });\n\n    if (!messages) {\n        return;\n    }\n\n    markWindowKnown(source);\n\n    for (const message of messages) {\n        if (receivedMessages.has(message.id)) {\n            return;\n        }\n\n        receivedMessages.set(message.id, true);\n\n        if (isWindowClosed(source) && !message.fireAndForget) {\n            return;\n        }\n\n        if (message.origin.indexOf(PROTOCOL.FILE) === 0) {\n            origin = `${ PROTOCOL.FILE }//`;\n        }\n\n        try {\n            if (message.type === MESSAGE_TYPE.REQUEST) {\n                handleRequest(source, origin, message, { on, send });\n            } else if (message.type === MESSAGE_TYPE.RESPONSE) {\n                handleResponse(source, origin, message);\n            } else if (message.type === MESSAGE_TYPE.ACK) {\n                handleAck(source, origin, message);\n            }\n        } catch (err) {\n            setTimeout(() => {\n                throw err;\n            }, 0);\n        }\n    }\n}\n\nexport function setupGlobalReceiveMessage({ on, send } : {| on : OnType, send : SendType |}) {\n    const global = getGlobal();\n    global.receiveMessage = global.receiveMessage || (message => receiveMessage(message, { on, send }));\n}\n\ntype ListenerEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string,\n    sourceElement : CrossDomainWindowType,\n    originalEvent? : {| origin : string |}\n|};\n\nexport function messageListener(event : ListenerEvent, { on, send } : {| on : OnType, send : SendType |}) {\n    ZalgoPromise.try(() => {\n        try {\n            noop(event.source);\n        } catch (err) {\n            return;\n        }\n\n        const source = event.source || event.sourceElement;\n        let origin = event.origin || (event.originalEvent && event.originalEvent.origin);\n        const data = event.data;\n\n        if (origin === 'null') {\n            origin = `${ PROTOCOL.FILE }//`;\n        }\n\n        if (!source) {\n            return;\n        }\n\n        if (!origin) {\n            throw new Error(`Post message did not have origin domain`);\n        }\n\n        if (__TEST__) {\n            if (needsGlobalMessagingForBrowser() && isSameTopWindow(source, window) === false) {\n                return;\n            }\n        }\n\n        receiveMessage({ source, origin, data }, { on, send });\n    });\n}\n\nexport function listenForMessages({ on, send } : {| on : OnType, send : SendType |}) : CancelableType {\n    return globalStore().getOrSet('postMessageListener', () => {\n        return addEventListener(window, 'message', event => {\n            // $FlowFixMe\n            messageListener(event, { on, send });\n        });\n    });\n}\n\nexport function stopListenForMessages() {\n    const listener = globalStore().get('postMessageListener');\n    if (listener) {\n        listener.cancel();\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nimport { addRequestListener } from '../drivers';\nimport { WILDCARD } from '../conf';\nimport type { ServerOptionsType, HandlerType, CancelableType } from '../types';\n\nconst getDefaultServerOptions = () : ServerOptionsType => {\n    // $FlowFixMe\n    return {};\n};\n\nexport function on(name : string, options : ServerOptionsType | HandlerType, handler : ?HandlerType) : CancelableType {\n\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    options = options || getDefaultServerOptions();\n    if (typeof options === 'function') {\n        handler = options;\n        options = getDefaultServerOptions();\n    }\n\n    if (!handler) {\n        throw new Error('Expected handler');\n    }\n\n    const winOrProxyWin = options.window;\n    const domain = options.domain || WILDCARD;\n\n    const successHandler = handler || options.handler;\n    const errorHandler = options.errorHandler || (err => {\n        throw err;\n    });\n\n    const requestListener = addRequestListener({ name, win: winOrProxyWin, domain }, {\n        handler:     successHandler,\n        handleError: errorHandler\n    });\n\n    return {\n        cancel() {\n            requestListener.cancel();\n        }\n    };\n}\n\ntype CancelableZalgoPromise<T> = ZalgoPromise<T> & {|\n    cancel : () => void\n|};\n\nexport function once(name : string, options? : ServerOptionsType | HandlerType, handler? : HandlerType) : CancelableZalgoPromise<{| source : mixed, origin : string, data : Object |}> {\n    \n    options = options || getDefaultServerOptions();\n    if (typeof options === 'function') {\n        handler = options;\n        options = getDefaultServerOptions();\n    }\n\n    const promise = new ZalgoPromise();\n    let listener; // eslint-disable-line prefer-const\n\n    options.errorHandler = (err) => {\n        listener.cancel();\n        promise.reject(err);\n    };\n\n    listener = on(name, options, event => {\n        listener.cancel();\n        promise.resolve(event);\n        if (handler) {\n            return handler(event);\n        }\n    });\n\n    // $FlowFixMe\n    promise.cancel = listener.cancel;\n\n    // $FlowFixMe\n    return promise;\n}\n","/* @flow */\n\nimport { getUserAgent } from 'cross-domain-utils/src';\n\nexport function needsGlobalMessagingForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|rv:11|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isAncestor, isWindowClosed, getDomain, matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID, isRegex, noop, safeInterval, stringify, stringifyError } from 'belter/src';\n\n\nimport { CHILD_WINDOW_TIMEOUT, MESSAGE_TYPE, WILDCARD, MESSAGE_NAME, ACK_TIMEOUT, RES_TIMEOUT, ACK_TIMEOUT_KNOWN, RESPONSE_CYCLE_TIME } from '../conf';\nimport { sendMessage, addResponseListener, deleteResponseListener, markResponseListenerErrored, type ResponseListenerType } from '../drivers';\nimport { awaitWindowHello, sayHello, isWindowKnown } from '../lib';\nimport { windowStore } from '../global';\nimport { ProxyWindow } from '../serialize/window';\nimport type { SendType } from '../types';\n\nimport { on } from './on';\n\nfunction validateOptions(name : string, win : CrossDomainWindowType, domain : ?DomainMatcher) {\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (domain) {\n        if (typeof domain !== 'string' && !Array.isArray(domain) && !isRegex(domain)) {\n            throw new TypeError(`Can not send ${ name }. Expected domain ${ JSON.stringify(domain) } to be a string, array, or regex`);\n        }\n    }\n\n    if (isWindowClosed(win)) {\n        throw new Error(`Can not send ${ name }. Target window is closed`);\n    }\n}\n\nfunction normalizeDomain(win : CrossDomainWindowType, targetDomain : DomainMatcher, actualDomain : ?string, { send } : {| send : SendType |}) : ZalgoPromise<string> {\n    return ZalgoPromise.try(() => {\n        if (typeof targetDomain === 'string') {\n            return targetDomain;\n        }\n\n        return ZalgoPromise.try(() => {\n            return actualDomain || sayHello(win, { send }).then(({ domain }) => domain);\n\n        }).then(normalizedDomain => {\n            if (!matchDomain(targetDomain, targetDomain)) {\n                throw new Error(`Domain ${ stringify(targetDomain) } does not match ${ stringify(targetDomain) }`);\n            }\n\n            return normalizedDomain;\n        });\n    });\n}\n\nexport const send : SendType = (winOrProxyWin, name, data, options) => {\n    options = options || {};\n    const domainMatcher = options.domain || WILDCARD;\n    const responseTimeout = options.timeout || RES_TIMEOUT;\n    const childTimeout = options.timeout || CHILD_WINDOW_TIMEOUT;\n    const fireAndForget = options.fireAndForget || false;\n\n    return ProxyWindow.toProxyWindow(winOrProxyWin, { send }).awaitWindow().then(win => {\n\n        // $FlowFixMe\n        return ZalgoPromise.try(() => {\n            validateOptions(name, win, domainMatcher);\n\n            if (isAncestor(window, win)) {\n                return awaitWindowHello(win, childTimeout);\n            }\n            \n        }).then(({ domain: actualDomain } = {}) => {\n\n            return normalizeDomain(win, domainMatcher, actualDomain, { send });\n        }).then(targetDomain => {\n            const domain = targetDomain;\n\n            const logName = (name === MESSAGE_NAME.METHOD && data && typeof data.name === 'string') ? `${ data.name }()` : name;\n\n            if (__DEBUG__) {\n                console.info('send::req', logName, domain, '\\n\\n', data); // eslint-disable-line no-console\n            }\n\n            const promise = new ZalgoPromise();\n            const hash = `${ name }_${ uniqueID() }`;\n\n            if (!fireAndForget) {\n                const responseListener : ResponseListenerType = { name, win, domain, promise };\n                addResponseListener(hash, responseListener);\n\n                const reqPromises = windowStore('requestPromises').getOrSet(win, () => []);\n                reqPromises.push(promise);\n\n                promise.catch(() => {\n                    markResponseListenerErrored(hash);\n                    deleteResponseListener(hash);\n                });\n\n                const totalAckTimeout = isWindowKnown(win) ? ACK_TIMEOUT_KNOWN : ACK_TIMEOUT;\n                const totalResTimeout = responseTimeout;\n\n                let ackTimeout = totalAckTimeout;\n                let resTimeout = totalResTimeout;\n            \n                const interval = safeInterval(() => {\n                    if (isWindowClosed(win)) {\n                        return promise.reject(new Error(`Window closed for ${ name } before ${ responseListener.ack ? 'response' : 'ack' }`));\n                    }\n\n                    if (responseListener.cancelled) {\n                        return promise.reject(new Error(`Response listener was cancelled for ${ name }`));\n                    }\n\n                    ackTimeout = Math.max(ackTimeout - RESPONSE_CYCLE_TIME, 0);\n                    if (resTimeout !== -1) {\n                        resTimeout = Math.max(resTimeout - RESPONSE_CYCLE_TIME, 0);\n                    }\n\n                    if (!responseListener.ack && ackTimeout === 0) {\n                        return promise.reject(new Error(`No ack for postMessage ${ logName } in ${ getDomain() } in ${ totalAckTimeout }ms`));\n\n                    } else if (resTimeout === 0) {\n                        return promise.reject(new Error(`No response for postMessage ${ logName } in ${ getDomain() } in ${ totalResTimeout }ms`));\n                    }\n                }, RESPONSE_CYCLE_TIME);\n\n                promise.finally(() => {\n                    interval.cancel();\n                    reqPromises.splice(reqPromises.indexOf(promise, 1));\n                }).catch(noop);\n            }\n\n            return sendMessage(win, domain, {\n                id:     uniqueID(),\n                origin: getDomain(window),\n                type:   MESSAGE_TYPE.REQUEST,\n                hash,\n                name,\n                data,\n                fireAndForget\n            }, { on, send }).then(() => {\n                return fireAndForget ? promise.resolve() : promise;\n            }, err => {\n                throw new Error(`Send request message failed for ${ logName } in ${ getDomain() }\\n\\n${ stringifyError(err) }`);\n            });\n        });\n    });\n};\n","/* @flow */\n\nexport const BRIDGE_TIMEOUT = 5000;\nexport const CHILD_WINDOW_TIMEOUT = 5000;\n\nexport const ACK_TIMEOUT = 2000;\nexport const ACK_TIMEOUT_KNOWN = 10000;\nexport const RES_TIMEOUT : number = __TEST__ ? 2000 : -1;\nexport const RESPONSE_CYCLE_TIME = 500;\n","/* @flow */\n\nimport type { CrossDomainWindowType, DomainMatcher } from 'cross-domain-utils/src';\n\nimport { initHello } from './lib';\nimport { listenForMessages, stopListenForMessages, receiveMessage, setupGlobalReceiveMessage, cancelResponseListeners } from './drivers';\nimport { getGlobal, deleteGlobal } from './global';\nimport { on, send } from './public';\nimport { setupBridge } from './bridge';\nimport { serializeMessage as internalSerializeMessage, deserializeMessage as internalDeserializeMessage, ProxyWindow } from './serialize';\n\nexport function serializeMessage<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T) : string {\n    return internalSerializeMessage(destination, domain, obj, { on, send });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string) : T {\n    return internalDeserializeMessage(source, origin, message, { on, send });\n}\n\nexport function createProxyWindow(win? : CrossDomainWindowType) : ProxyWindow {\n    return new ProxyWindow({ send, win });\n}\n\nexport function toProxyWindow(win : CrossDomainWindowType | ProxyWindow) : ProxyWindow {\n    return ProxyWindow.toProxyWindow(win, { send });\n}\n\nexport function setup() {\n    if (!getGlobal().initialized) {\n        getGlobal().initialized = true;\n    \n        setupGlobalReceiveMessage({ on, send });\n        listenForMessages({ on, send });\n    \n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            setupBridge({ on, send, receiveMessage });\n        }\n\n        initHello({ on, send });\n    }\n}\n\nexport function destroy() {\n    cancelResponseListeners();\n    stopListenForMessages();\n    deleteGlobal();\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from 'zalgo-promise/src';\nimport type { CrossDomainWindowType, DomainMatcher } from 'cross-domain-utils/src';\n\nimport type { ProxyWindow } from './serialize/window';\n\n// export something to force webpack to see this as an ES module\nexport const TYPES = true;\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type CancelableType = {\n    cancel : () => void\n};\n\nexport type ErrorHandlerType = (err : mixed) => void;\n\nexport type HandlerType = ({|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : any // eslint-disable-line flowtype/no-weak-types\n|}) => (void | any | ZalgoPromise<any>); // eslint-disable-line flowtype/no-weak-types\n\nexport type ServerOptionsType = {|\n    handler? : ?HandlerType,\n    errorHandler? : ?ErrorHandlerType,\n    window? : CrossDomainWindowType | ProxyWindow,\n    name? : ?string,\n    domain? : ?DomainMatcher,\n    once? : ?boolean,\n    errorOnClose? : ?boolean\n|};\n\nexport type OnType = (\n    name : string,\n    options : ServerOptionsType | HandlerType,\n    handler : ?HandlerType\n) => CancelableType;\n\ntype RegularRequestOptionsType = {|\n    domain? : ?DomainMatcher,\n    fireAndForget? : false,\n    timeout? : ?number\n|};\n\ntype FireAndForgetRequestOptionsType = {|\n    domain? : ?DomainMatcher,\n    fireAndForget : true,\n    timeout? : ?number\n|};\n\nexport type RequestOptionsType = RegularRequestOptionsType | FireAndForgetRequestOptionsType;\n\nexport type ResponseMessageEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : Object\n|};\n\ntype RegularSendType = (\n    win : CrossDomainWindowType | ProxyWindow,\n    name : string,\n    data : ?Object,\n    options? : RegularRequestOptionsType\n) => ZalgoPromise<ResponseMessageEvent>;\n\ntype FireAndForgetSendType = (\n    win : CrossDomainWindowType | ProxyWindow,\n    name : string,\n    data : ?Object,\n    options? : FireAndForgetRequestOptionsType\n) => ZalgoPromise<void>;\n\nexport type SendType = RegularSendType & FireAndForgetSendType;\n\nexport type MessageEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string\n|};\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type CrossDomainFunctionType<A, R> = {\n    (...args : A) : ZalgoPromise<R>,\n    fireAndForget : (...args : A) => ZalgoPromise<void>,\n    __id__? : string,\n    __name__? : string\n};\n\nexport type ReceiveMessageType = (MessageEvent, {| on : OnType, send : SendType |}) => void;\n","/* @flow */\n\nimport { setup } from './setup';\nimport { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge, needsBridgeForBrowser, hasBridge,\n    needsBridgeForWin, needsBridgeForDomain, destroyBridges } from './bridge';\n\nexport { ZalgoPromise as Promise } from 'zalgo-promise/src';\n\nexport * from './types';\nexport { ProxyWindow } from './serialize';\nexport { setup, destroy, serializeMessage, deserializeMessage, createProxyWindow, toProxyWindow } from './setup';\nexport { on, once, send } from './public';\nexport { markWindowKnown } from './lib';\nexport { cleanUpWindow } from './clean';\n\n// $FlowFixMe\nexport let bridge;\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n    bridge = { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge,\n        needsBridgeForBrowser, hasBridge, needsBridgeForWin, needsBridgeForDomain, destroyBridges };\n}\n\nif (__POST_ROBOT__.__AUTO_SETUP__) {\n    setup();\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, isWindowClosed } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { windowStore } from './global';\n\nexport function cleanUpWindow(win : CrossDomainWindowType) {\n    const requestPromises = windowStore('requestPromises');\n    for (const promise of requestPromises.get(win, [])) {\n        promise.reject(new Error(`Window ${ isWindowClosed(win) ? 'closed' : 'cleaned up' } before response`)).catch(noop);\n    }\n}\n"],"sourceRoot":""}